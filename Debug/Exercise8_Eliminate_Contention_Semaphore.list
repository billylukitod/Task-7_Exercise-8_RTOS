
Exercise8_Eliminate_Contention_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005ae8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a14  20000014  08005afc  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  08005afc  00007a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130d1  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db2  00000000  00000000  0001a115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da6  00000000  00000000  0001e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b7e  00000000  00000000  0001ee26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a3f  00000000  00000000  000219a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094df5  00000000  00000000  000343e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c91d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000c921c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000cdc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059cc 	.word	0x080059cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080059cc 	.word	0x080059cc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <AccessSharedData>:
/* USER CODE BEGIN PFP */

uint32_t count = 0;
int flag = 1;
void AccessSharedData()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if (flag) flag = 0;
 80004d4:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <AccessSharedData+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d003      	beq.n	80004e4 <AccessSharedData+0x14>
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <AccessSharedData+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	e004      	b.n	80004ee <AccessSharedData+0x1e>
	else HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2110      	movs	r1, #16
 80004e8:	4813      	ldr	r0, [pc, #76]	@ (8000538 <AccessSharedData+0x68>)
 80004ea:	f000 fdb7 	bl	800105c <HAL_GPIO_WritePin>

	TIM2->CNT = 0;
 80004ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	@ 0x24
	count = 0;
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <AccessSharedData+0x6c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 80004fc:	4810      	ldr	r0, [pc, #64]	@ (8000540 <AccessSharedData+0x70>)
 80004fe:	f001 faa7 	bl	8001a50 <HAL_TIM_Base_Start>
	while (TIM2->CNT < 1000000)
 8000502:	e004      	b.n	800050e <AccessSharedData+0x3e>
	{
		count = TIM2->CNT;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <AccessSharedData+0x6c>)
 800050c:	6013      	str	r3, [r2, #0]
	while (TIM2->CNT < 1000000)
 800050e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <AccessSharedData+0x74>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d9f4      	bls.n	8000504 <AccessSharedData+0x34>
	}
	HAL_TIM_Base_Stop(&htim2);
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <AccessSharedData+0x70>)
 800051c:	f001 faf2 	bl	8001b04 <HAL_TIM_Base_Stop>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2110      	movs	r1, #16
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <AccessSharedData+0x68>)
 8000526:	f000 fd99 	bl	800105c <HAL_GPIO_WritePin>

	flag = 1;
 800052a:	4b02      	ldr	r3, [pc, #8]	@ (8000534 <AccessSharedData+0x64>)
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	40020000 	.word	0x40020000
 800053c:	20000088 	.word	0x20000088
 8000540:	20000030 	.word	0x20000030
 8000544:	000f423f 	.word	0x000f423f

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fade 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f840 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8f4 	bl	8000740 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000558:	f000 f8a6 	bl	80006a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f001 ff28 	bl	80023b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000560:	4a11      	ldr	r2, [pc, #68]	@ (80005a8 <main+0x60>)
 8000562:	2101      	movs	r1, #1
 8000564:	2001      	movs	r0, #1
 8000566:	f002 f81a 	bl	800259e <osSemaphoreNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <main+0x64>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GreenLEDTask */
  GreenLEDTaskHandle = osThreadNew(StartGreenLEDTask, NULL, &GreenLEDTask_attributes);
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0x68>)
 8000572:	2100      	movs	r1, #0
 8000574:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0x6c>)
 8000576:	f001 ff65 	bl	8002444 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <main+0x70>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of RedLEDTask */
  RedLEDTaskHandle = osThreadNew(StartRedLEDTask, NULL, &RedLEDTask_attributes);
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <main+0x74>)
 8000582:	2100      	movs	r1, #0
 8000584:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <main+0x78>)
 8000586:	f001 ff5d 	bl	8002444 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <main+0x7c>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of OrangeLEDTask */
  OrangeLEDTaskHandle = osThreadNew(StartOrangeLEDTask, NULL, &OrangeLEDTask_attributes);
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <main+0x80>)
 8000592:	2100      	movs	r1, #0
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <main+0x84>)
 8000596:	f001 ff55 	bl	8002444 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <main+0x88>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f001 ff2a 	bl	80023f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x5c>
 80005a8:	08005ab0 	.word	0x08005ab0
 80005ac:	20000084 	.word	0x20000084
 80005b0:	08005a44 	.word	0x08005a44
 80005b4:	080007c5 	.word	0x080007c5
 80005b8:	20000078 	.word	0x20000078
 80005bc:	08005a68 	.word	0x08005a68
 80005c0:	08000815 	.word	0x08000815
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	08005a8c 	.word	0x08005a8c
 80005cc:	08000869 	.word	0x08000869
 80005d0:	20000080 	.word	0x20000080

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 f9b8 	bl	8005958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000648:	2319      	movs	r3, #25
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	@ 0xa8
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd31 	bl	80010c4 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f920 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f000 ff93 	bl	80015b4 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000694:	f000 f90a 	bl	80008ac <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	@ 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_TIM2_Init+0x94>)
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_TIM2_Init+0x94>)
 80006ce:	2253      	movs	r2, #83	@ 0x53
 80006d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_TIM2_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_TIM2_Init+0x94>)
 80006da:	f04f 32ff 	mov.w	r2, #4294967295
 80006de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_TIM2_Init+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_TIM2_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <MX_TIM2_Init+0x94>)
 80006ee:	f001 f95f 	bl	80019b0 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006f8:	f000 f8d8 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_TIM2_Init+0x94>)
 800070a:	f001 fb75 	bl	8001df8 <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 f8ca 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM2_Init+0x94>)
 8000726:	f001 fd7d 	bl	8002224 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000730:	f000 f8bc 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000030 	.word	0x20000030

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_GPIO_Init+0x7c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <MX_GPIO_Init+0x7c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_GPIO_Init+0x7c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	21f0      	movs	r1, #240	@ 0xf0
 8000792:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <MX_GPIO_Init+0x80>)
 8000794:	f000 fc62 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_ORANGE_Pin;
 8000798:	23f0      	movs	r3, #240	@ 0xf0
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_GPIO_Init+0x80>)
 80007b0:	f000 fad0 	bl	8000d54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <StartGreenLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGreenLEDTask */
void StartGreenLEDTask(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2120      	movs	r1, #32
 80007d0:	480e      	ldr	r0, [pc, #56]	@ (800080c <StartGreenLEDTask+0x48>)
 80007d2:	f000 fc43 	bl	800105c <HAL_GPIO_WritePin>

	  osSemaphoreAcquire(CriticalResourceSemaphoreHandle, 1000);
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <StartGreenLEDTask+0x4c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff66 	bl	80026b0 <osSemaphoreAcquire>
	  AccessSharedData();
 80007e4:	f7ff fe74 	bl	80004d0 <AccessSharedData>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <StartGreenLEDTask+0x4c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 ffb1 	bl	8002754 <osSemaphoreRelease>

	  osDelay(200);
 80007f2:	20c8      	movs	r0, #200	@ 0xc8
 80007f4:	f001 feb8 	bl	8002568 <osDelay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2120      	movs	r1, #32
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <StartGreenLEDTask+0x48>)
 80007fe:	f000 fc2d 	bl	800105c <HAL_GPIO_WritePin>
	  osDelay(200);
 8000802:	20c8      	movs	r0, #200	@ 0xc8
 8000804:	f001 feb0 	bl	8002568 <osDelay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000808:	bf00      	nop
 800080a:	e7df      	b.n	80007cc <StartGreenLEDTask+0x8>
 800080c:	40020000 	.word	0x40020000
 8000810:	20000084 	.word	0x20000084

08000814 <StartRedLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLEDTask */
void StartRedLEDTask(void *argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLEDTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2140      	movs	r1, #64	@ 0x40
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <StartRedLEDTask+0x4c>)
 8000822:	f000 fc1b 	bl	800105c <HAL_GPIO_WritePin>

	  osSemaphoreAcquire(CriticalResourceSemaphoreHandle, 1000);
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <StartRedLEDTask+0x50>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff3e 	bl	80026b0 <osSemaphoreAcquire>
	  AccessSharedData();
 8000834:	f7ff fe4c 	bl	80004d0 <AccessSharedData>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <StartRedLEDTask+0x50>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f001 ff89 	bl	8002754 <osSemaphoreRelease>

	  osDelay(550);
 8000842:	f240 2026 	movw	r0, #550	@ 0x226
 8000846:	f001 fe8f 	bl	8002568 <osDelay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <StartRedLEDTask+0x4c>)
 8000850:	f000 fc04 	bl	800105c <HAL_GPIO_WritePin>
	  osDelay(550);
 8000854:	f240 2026 	movw	r0, #550	@ 0x226
 8000858:	f001 fe86 	bl	8002568 <osDelay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800085c:	bf00      	nop
 800085e:	e7dd      	b.n	800081c <StartRedLEDTask+0x8>
 8000860:	40020000 	.word	0x40020000
 8000864:	20000084 	.word	0x20000084

08000868 <StartOrangeLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOrangeLEDTask */
void StartOrangeLEDTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOrangeLEDTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <StartOrangeLEDTask+0x1c>)
 8000874:	f000 fc0b 	bl	800108e <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000878:	2032      	movs	r0, #50	@ 0x32
 800087a:	f001 fe75 	bl	8002568 <osDelay>
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800087e:	bf00      	nop
 8000880:	e7f6      	b.n	8000870 <StartOrangeLEDTask+0x8>
 8000882:	bf00      	nop
 8000884:	40020000 	.word	0x40020000

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 f959 	bl	8000b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40000800 	.word	0x40000800

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a11      	ldr	r2, [pc, #68]	@ (800090c <HAL_MspInit+0x54>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <HAL_MspInit+0x54>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f000 f9ff 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000920:	d10d      	bne.n	800093e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_TIM_Base_MspInit+0x3c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_TIM_Base_MspInit+0x3c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <HAL_InitTick+0xe4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	4a32      	ldr	r2, [pc, #200]	@ (8000a34 <HAL_InitTick+0xe4>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000970:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <HAL_InitTick+0xe4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 ffe0 	bl	800194c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000996:	f000 ffc5 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 800099a:	6378      	str	r0, [r7, #52]	@ 0x34
 800099c:	e004      	b.n	80009a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099e:	f000 ffc1 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 80009a2:	4603      	mov	r3, r0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	0c9b      	lsrs	r3, r3, #18
 80009b2:	3b01      	subs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_InitTick+0xec>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <HAL_InitTick+0xf0>)
 80009ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <HAL_InitTick+0xec>)
 80009be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009c4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <HAL_InitTick+0xec>)
 80009c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_InitTick+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <HAL_InitTick+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_InitTick+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009dc:	4817      	ldr	r0, [pc, #92]	@ (8000a3c <HAL_InitTick+0xec>)
 80009de:	f000 ffe7 	bl	80019b0 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11b      	bne.n	8000a28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <HAL_InitTick+0xec>)
 80009f2:	f001 f8af 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d111      	bne.n	8000a28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a04:	201e      	movs	r0, #30
 8000a06:	f000 f997 	bl	8000d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d808      	bhi.n	8000a22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	201e      	movs	r0, #30
 8000a16:	f000 f973 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_InitTick+0xf4>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e002      	b.n	8000a28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3738      	adds	r7, #56	@ 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	2000008c 	.word	0x2000008c
 8000a40:	40000800 	.word	0x40000800
 8000a44:	20000008 	.word	0x20000008

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <TIM4_IRQHandler+0x10>)
 8000a86:	f001 f8c7 	bl	8001c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000008c 	.word	0x2000008c

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f004 ff3f 	bl	8005968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd2d 	bl	8000548 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000afc:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 8000b00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b04:	20004a28 	.word	0x20004a28

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f8d8 	bl	8000cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff ff08 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff feba 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	200000d4 	.word	0x200000d4

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000d4 	.word	0x200000d4

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	@ (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	@ 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4c 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff61 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffb1 	bl	8000c84 <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff80 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e159      	b.n	8001024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 8148 	bne.w	800101e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a2 	beq.w	800101e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b57      	ldr	r3, [pc, #348]	@ (800103c <HAL_GPIO_Init+0x2e8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a56      	ldr	r2, [pc, #344]	@ (800103c <HAL_GPIO_Init+0x2e8>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b54      	ldr	r3, [pc, #336]	@ (800103c <HAL_GPIO_Init+0x2e8>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a52      	ldr	r2, [pc, #328]	@ (8001040 <HAL_GPIO_Init+0x2ec>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x202>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	@ (8001048 <HAL_GPIO_Init+0x2f4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x1fe>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	@ (800104c <HAL_GPIO_Init+0x2f8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x1fa>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <HAL_GPIO_Init+0x2fc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x1f6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	@ (8001054 <HAL_GPIO_Init+0x300>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x1f2>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f46:	2307      	movs	r3, #7
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x204>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	@ (8001040 <HAL_GPIO_Init+0x2ec>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b38      	ldr	r3, [pc, #224]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_GPIO_Init+0x304>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <HAL_GPIO_Init+0x304>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f aea2 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40013c00 	.word	0x40013c00

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001078:	e003      	b.n	8001082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	041a      	lsls	r2, r3, #16
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	400b      	ands	r3, r1
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e267      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d075      	beq.n	80011ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e2:	4b88      	ldr	r3, [pc, #544]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d00c      	beq.n	8001108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ee:	4b85      	ldr	r3, [pc, #532]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d112      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001106:	d10b      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b7e      	ldr	r3, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d05b      	beq.n	80011cc <HAL_RCC_OscConfig+0x108>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d157      	bne.n	80011cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e242      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x74>
 800112a:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a75      	ldr	r2, [pc, #468]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x98>
 8001142:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6f      	ldr	r2, [pc, #444]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6d      	ldr	r3, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6c      	ldr	r2, [pc, #432]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 800115c:	4b69      	ldr	r3, [pc, #420]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcfc 	bl	8000b78 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcf8 	bl	8000b78 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e207      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5b      	ldr	r3, [pc, #364]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xc0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fce8 	bl	8000b78 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fce4 	bl	8000b78 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1f3      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0xe8>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011da:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e6:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f2:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4937      	ldr	r1, [pc, #220]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <HAL_RCC_OscConfig+0x244>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fc9d 	bl	8000b78 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fc99 	bl	8000b78 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a8      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4925      	ldr	r1, [pc, #148]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <HAL_RCC_OscConfig+0x244>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc7c 	bl	8000b78 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fc78 	bl	8000b78 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e187      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d016      	beq.n	80012e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_RCC_OscConfig+0x248>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fc5c 	bl	8000b78 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc58 	bl	8000b78 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e167      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80012d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x200>
 80012e2:	e01b      	b.n	800131c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_OscConfig+0x248>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fc45 	bl	8000b78 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	e00e      	b.n	8001310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc41 	bl	8000b78 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d907      	bls.n	8001310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e150      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001304:	40023800 	.word	0x40023800
 8001308:	42470000 	.word	0x42470000
 800130c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b88      	ldr	r3, [pc, #544]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ea      	bne.n	80012f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8097 	beq.w	8001458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b81      	ldr	r3, [pc, #516]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b7d      	ldr	r3, [pc, #500]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a7c      	ldr	r2, [pc, #496]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b7a      	ldr	r3, [pc, #488]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b77      	ldr	r3, [pc, #476]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b74      	ldr	r3, [pc, #464]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a73      	ldr	r2, [pc, #460]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fc01 	bl	8000b78 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fbfd 	bl	8000b78 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e10c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b6a      	ldr	r3, [pc, #424]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x2ea>
 80013a0:	4b64      	ldr	r3, [pc, #400]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a4:	4a63      	ldr	r2, [pc, #396]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x30c>
 80013b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d4:	4a57      	ldr	r2, [pc, #348]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	@ 0x70
 80013dc:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e0:	4a54      	ldr	r2, [pc, #336]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff fbc2 	bl	8000b78 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fbbe 	bl	8000b78 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0cb      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140e:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ee      	beq.n	80013f8 <HAL_RCC_OscConfig+0x334>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fbac 	bl	8000b78 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fba8 	bl	8000b78 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0b5      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143a:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ee      	bne.n	8001424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b39      	ldr	r3, [pc, #228]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a1 	beq.w	80015a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001462:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b08      	cmp	r3, #8
 800146c:	d05c      	beq.n	8001528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d141      	bne.n	80014fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fb7c 	bl	8000b78 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fb78 	bl	8000b78 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e087      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b01      	subs	r3, #1
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	491b      	ldr	r1, [pc, #108]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb51 	bl	8000b78 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb4d 	bl	8000b78 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e05c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x416>
 80014f8:	e054      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb3a 	bl	8000b78 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fb36 	bl	8000b78 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x444>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e038      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000
 800153c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_RCC_OscConfig+0x4ec>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d028      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d121      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d11a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001578:	4293      	cmp	r3, r2
 800157a:	d111      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0cc      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b68      	ldr	r3, [pc, #416]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d90c      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a52      	ldr	r2, [pc, #328]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800162a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d044      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d119      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d003      	beq.n	8001672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	2b03      	cmp	r3, #3
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e067      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4934      	ldr	r1, [pc, #208]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa68 	bl	8000b78 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa64 	bl	8000b78 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e04f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20c      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f8f8 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00
 8001770:	40023800 	.word	0x40023800
 8001774:	08005ac0 	.word	0x08005ac0
 8001778:	20000004 	.word	0x20000004
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001784:	b090      	sub	sp, #64	@ 0x40
 8001786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d00d      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x40>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	f200 80a1 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x16c>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x3a>
 80017b2:	e09b      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x184>)
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017b8:	e09b      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ba:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017be:	e098      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d028      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	2200      	movs	r2, #0
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017e8:	2100      	movs	r1, #0
 80017ea:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017ec:	fb03 f201 	mul.w	r2, r3, r1
 80017f0:	2300      	movs	r3, #0
 80017f2:	fb00 f303 	mul.w	r3, r0, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	4a43      	ldr	r2, [pc, #268]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x188>)
 80017fa:	fba0 1202 	umull	r1, r2, r0, r2
 80017fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001800:	460a      	mov	r2, r1
 8001802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001806:	4413      	add	r3, r2
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180c:	2200      	movs	r2, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	61fa      	str	r2, [r7, #28]
 8001812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800181a:	f7fe fce1 	bl	80001e0 <__aeabi_uldivmod>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4613      	mov	r3, r2
 8001824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001826:	e053      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001828:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	2200      	movs	r2, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	617a      	str	r2, [r7, #20]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800183a:	f04f 0b00 	mov.w	fp, #0
 800183e:	4652      	mov	r2, sl
 8001840:	465b      	mov	r3, fp
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0159      	lsls	r1, r3, #5
 800184c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001850:	0150      	lsls	r0, r2, #5
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ebb2 080a 	subs.w	r8, r2, sl
 800185a:	eb63 090b 	sbc.w	r9, r3, fp
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800186a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800186e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001872:	ebb2 0408 	subs.w	r4, r2, r8
 8001876:	eb63 0509 	sbc.w	r5, r3, r9
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	00eb      	lsls	r3, r5, #3
 8001884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001888:	00e2      	lsls	r2, r4, #3
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	eb14 030a 	adds.w	r3, r4, sl
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	eb45 030b 	adc.w	r3, r5, fp
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ba:	2200      	movs	r2, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	60fa      	str	r2, [r7, #12]
 80018c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c4:	f7fe fc8c 	bl	80001e0 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3740      	adds	r7, #64	@ 0x40
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	00f42400 	.word	0x00f42400
 8001908:	017d7840 	.word	0x017d7840

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_RCC_GetHCLKFreq+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001928:	f7ff fff0 	bl	800190c <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	@ (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	08005ad0 	.word	0x08005ad0

0800194c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	220f      	movs	r2, #15
 800195a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <HAL_RCC_GetClockConfig+0x60>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0207 	and.w	r2, r3, #7
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e041      	b.n	8001a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe ff9a 	bl	8000910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f000 faf2 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d001      	beq.n	8001a68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e03c      	b.n	8001ae2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_TIM_Base_Start+0xa0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d018      	beq.n	8001aac <HAL_TIM_Base_Start+0x5c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a82:	d013      	beq.n	8001aac <HAL_TIM_Base_Start+0x5c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_TIM_Base_Start+0xa4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00e      	beq.n	8001aac <HAL_TIM_Base_Start+0x5c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_TIM_Base_Start+0xa8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_TIM_Base_Start+0x5c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_TIM_Base_Start+0xac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <HAL_TIM_Base_Start+0x5c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_TIM_Base_Start+0xb0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d010      	beq.n	8001ae0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ace:	e007      	b.n	8001ae0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40000800 	.word	0x40000800
 8001afc:	40000c00 	.word	0x40000c00
 8001b00:	40014000 	.word	0x40014000

08001b04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10f      	bne.n	8001b3c <HAL_TIM_Base_Stop+0x38>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	f240 4344 	movw	r3, #1092	@ 0x444
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_TIM_Base_Stop+0x38>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e044      	b.n	8001bf6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b96:	d013      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_TIM_Base_Start_IT+0xb8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	e007      	b.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40000c00 	.word	0x40000c00
 8001c14:	40014000 	.word	0x40014000

08001c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0202 	mvn.w	r2, #2
 8001c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f999 	bl	8001f9a <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f98b 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f99c 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0204 	mvn.w	r2, #4
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f973 	bl	8001f9a <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f965 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f976 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0208 	mvn.w	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f94d 	bl	8001f9a <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f93f 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f950 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d020      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0210 	mvn.w	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f927 	bl	8001f9a <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f919 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f92a 	bl	8001fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fd82 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fab6 	bl	8002314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8fb 	bl	8001fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0220 	mvn.w	r2, #32
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa88 	bl	8002300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIM_ConfigClockSource+0x1c>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0b4      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x186>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e4c:	d03e      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0xd4>
 8001e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e52:	f200 8087 	bhi.w	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	f000 8086 	beq.w	8001f6a <HAL_TIM_ConfigClockSource+0x172>
 8001e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e62:	d87f      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e64:	2b70      	cmp	r3, #112	@ 0x70
 8001e66:	d01a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0xa6>
 8001e68:	2b70      	cmp	r3, #112	@ 0x70
 8001e6a:	d87b      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e6c:	2b60      	cmp	r3, #96	@ 0x60
 8001e6e:	d050      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x11a>
 8001e70:	2b60      	cmp	r3, #96	@ 0x60
 8001e72:	d877      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e74:	2b50      	cmp	r3, #80	@ 0x50
 8001e76:	d03c      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8001e78:	2b50      	cmp	r3, #80	@ 0x50
 8001e7a:	d873      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d058      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0x13a>
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d86f      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	2b30      	cmp	r3, #48	@ 0x30
 8001e86:	d064      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	2b30      	cmp	r3, #48	@ 0x30
 8001e8a:	d86b      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d060      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d867      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05c      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d05a      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e9c:	e062      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eae:	f000 f999 	bl	80021e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	609a      	str	r2, [r3, #8]
      break;
 8001eca:	e04f      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001edc:	f000 f982 	bl	80021e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eee:	609a      	str	r2, [r3, #8]
      break;
 8001ef0:	e03c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001efe:	461a      	mov	r2, r3
 8001f00:	f000 f8f6 	bl	80020f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2150      	movs	r1, #80	@ 0x50
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f94f 	bl	80021ae <TIM_ITRx_SetConfig>
      break;
 8001f10:	e02c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f000 f915 	bl	800214e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2160      	movs	r1, #96	@ 0x60
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f93f 	bl	80021ae <TIM_ITRx_SetConfig>
      break;
 8001f30:	e01c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f000 f8d6 	bl	80020f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2140      	movs	r1, #64	@ 0x40
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f92f 	bl	80021ae <TIM_ITRx_SetConfig>
      break;
 8001f50:	e00c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f000 f926 	bl	80021ae <TIM_ITRx_SetConfig>
      break;
 8001f62:	e003      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
      break;
 8001f68:	e000      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	@ (80020d4 <TIM_Base_SetConfig+0xfc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00f      	beq.n	8002010 <TIM_Base_SetConfig+0x38>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff6:	d00b      	beq.n	8002010 <TIM_Base_SetConfig+0x38>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <TIM_Base_SetConfig+0x100>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <TIM_Base_SetConfig+0x38>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a36      	ldr	r2, [pc, #216]	@ (80020dc <TIM_Base_SetConfig+0x104>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_Base_SetConfig+0x38>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a35      	ldr	r2, [pc, #212]	@ (80020e0 <TIM_Base_SetConfig+0x108>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <TIM_Base_SetConfig+0xfc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01b      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002030:	d017      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a28      	ldr	r2, [pc, #160]	@ (80020d8 <TIM_Base_SetConfig+0x100>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a27      	ldr	r2, [pc, #156]	@ (80020dc <TIM_Base_SetConfig+0x104>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <TIM_Base_SetConfig+0x108>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <TIM_Base_SetConfig+0x10c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <TIM_Base_SetConfig+0x110>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0x8a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	@ (80020ec <TIM_Base_SetConfig+0x114>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <TIM_Base_SetConfig+0xfc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d103      	bne.n	80020a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f023 0201 	bic.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
  }
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40014000 	.word	0x40014000
 80020e8:	40014400 	.word	0x40014400
 80020ec:	40014800 	.word	0x40014800

080020f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f023 0201 	bic.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800211a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 030a 	bic.w	r3, r3, #10
 800212c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800214e:	b480      	push	{r7}
 8002150:	b087      	sub	sp, #28
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 0210 	bic.w	r2, r3, #16
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	031b      	lsls	r3, r3, #12
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800218a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f043 0307 	orr.w	r3, r3, #7
 80021d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	021a      	lsls	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	431a      	orrs	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002238:	2302      	movs	r3, #2
 800223a:	e050      	b.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d018      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002288:	d013      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a15      	ldr	r2, [pc, #84]	@ (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a13      	ldr	r2, [pc, #76]	@ (80022fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10c      	bne.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40000c00 	.word	0x40000c00
 80022fc:	40014000 	.word	0x40014000

08002300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <__NVIC_SetPriority>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SysTick_Handler+0x1c>)
 8002382:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002384:	f002 f968 	bl	8004658 <xTaskGetSchedulerState>
 8002388:	4603      	mov	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800238e:	f003 f863 	bl	8005458 <xPortSysTickHandler>
  }
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023a0:	2100      	movs	r1, #0
 80023a2:	f06f 0004 	mvn.w	r0, #4
 80023a6:	f7ff ffbf 	bl	8002328 <__NVIC_SetPriority>
#endif
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b6:	f3ef 8305 	mrs	r3, IPSR
 80023ba:	603b      	str	r3, [r7, #0]
  return(result);
 80023bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80023c2:	f06f 0305 	mvn.w	r3, #5
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	e00c      	b.n	80023e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <osKernelInitialize+0x44>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023d2:	4b08      	ldr	r3, [pc, #32]	@ (80023f4 <osKernelInitialize+0x44>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	e002      	b.n	80023e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200000d8 	.word	0x200000d8

080023f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fe:	f3ef 8305 	mrs	r3, IPSR
 8002402:	603b      	str	r3, [r7, #0]
  return(result);
 8002404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <osKernelStart+0x1a>
    stat = osErrorISR;
 800240a:	f06f 0305 	mvn.w	r3, #5
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	e010      	b.n	8002434 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <osKernelStart+0x48>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d109      	bne.n	800242e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800241a:	f7ff ffbf 	bl	800239c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <osKernelStart+0x48>)
 8002420:	2202      	movs	r2, #2
 8002422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002424:	f001 fcca 	bl	8003dbc <vTaskStartScheduler>
      stat = osOK;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	e002      	b.n	8002434 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200000d8 	.word	0x200000d8

08002444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	@ 0x38
 8002448:	af04      	add	r7, sp, #16
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002454:	f3ef 8305 	mrs	r3, IPSR
 8002458:	617b      	str	r3, [r7, #20]
  return(result);
 800245a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800245c:	2b00      	cmp	r3, #0
 800245e:	d17e      	bne.n	800255e <osThreadNew+0x11a>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d07b      	beq.n	800255e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800246a:	2318      	movs	r3, #24
 800246c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d045      	beq.n	800250a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <osThreadNew+0x48>
        name = attr->name;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <osThreadNew+0x6e>
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b38      	cmp	r3, #56	@ 0x38
 80024a4:	d805      	bhi.n	80024b2 <osThreadNew+0x6e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <osThreadNew+0x72>
        return (NULL);
 80024b2:	2300      	movs	r3, #0
 80024b4:	e054      	b.n	8002560 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <osThreadNew+0xa8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80024d4:	d90a      	bls.n	80024ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <osThreadNew+0xa8>
        mem = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e010      	b.n	800250e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <osThreadNew+0xca>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <osThreadNew+0xca>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <osThreadNew+0xca>
          mem = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e001      	b.n	800250e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d110      	bne.n	8002536 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800251c:	9202      	str	r2, [sp, #8]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 fa6a 	bl	8003a04 <xTaskCreateStatic>
 8002530:	4603      	mov	r3, r0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e013      	b.n	800255e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	b29a      	uxth	r2, r3
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f001 fab8 	bl	8003ac4 <xTaskCreate>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <osThreadNew+0x11a>
            hTask = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800255e:	693b      	ldr	r3, [r7, #16]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3728      	adds	r7, #40	@ 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002570:	f3ef 8305 	mrs	r3, IPSR
 8002574:	60bb      	str	r3, [r7, #8]
  return(result);
 8002576:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <osDelay+0x1c>
    stat = osErrorISR;
 800257c:	f06f 0305 	mvn.w	r3, #5
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e007      	b.n	8002594 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <osDelay+0x2c>
      vTaskDelay(ticks);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 fbde 	bl	8003d50 <vTaskDelay>
    }
  }

  return (stat);
 8002594:	68fb      	ldr	r3, [r7, #12]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08a      	sub	sp, #40	@ 0x28
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ae:	f3ef 8305 	mrs	r3, IPSR
 80025b2:	613b      	str	r3, [r7, #16]
  return(result);
 80025b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d175      	bne.n	80026a6 <osSemaphoreNew+0x108>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d072      	beq.n	80026a6 <osSemaphoreNew+0x108>
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d86e      	bhi.n	80026a6 <osSemaphoreNew+0x108>
    mem = -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <osSemaphoreNew+0x4c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b4f      	cmp	r3, #79	@ 0x4f
 80025e2:	d902      	bls.n	80025ea <osSemaphoreNew+0x4c>
        mem = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e00c      	b.n	8002604 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <osSemaphoreNew+0x66>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <osSemaphoreNew+0x66>
          mem = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	e001      	b.n	8002604 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d04c      	beq.n	80026a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d128      	bne.n	8002664 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10a      	bne.n	800262e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2203      	movs	r2, #3
 800261e:	9200      	str	r2, [sp, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2001      	movs	r0, #1
 8002626:	f000 fa2b 	bl	8002a80 <xQueueGenericCreateStatic>
 800262a:	61f8      	str	r0, [r7, #28]
 800262c:	e005      	b.n	800263a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800262e:	2203      	movs	r2, #3
 8002630:	2100      	movs	r1, #0
 8002632:	2001      	movs	r0, #1
 8002634:	f000 faa1 	bl	8002b7a <xQueueGenericCreate>
 8002638:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d022      	beq.n	8002686 <osSemaphoreNew+0xe8>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01f      	beq.n	8002686 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002646:	2300      	movs	r3, #0
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	69f8      	ldr	r0, [r7, #28]
 800264e:	f000 fb61 	bl	8002d14 <xQueueGenericSend>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d016      	beq.n	8002686 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002658:	69f8      	ldr	r0, [r7, #28]
 800265a:	f000 ffff 	bl	800365c <vQueueDelete>
            hSemaphore = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e010      	b.n	8002686 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	461a      	mov	r2, r3
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fadf 	bl	8002c36 <xQueueCreateCountingSemaphoreStatic>
 8002678:	61f8      	str	r0, [r7, #28]
 800267a:	e004      	b.n	8002686 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb12 	bl	8002ca8 <xQueueCreateCountingSemaphore>
 8002684:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <osSemaphoreNew+0xfc>
          name = attr->name;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e001      	b.n	800269e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	69f8      	ldr	r0, [r7, #28]
 80026a2:	f001 f927 	bl	80038f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80026a6:	69fb      	ldr	r3, [r7, #28]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80026c8:	f06f 0303 	mvn.w	r3, #3
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e039      	b.n	8002744 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026d0:	f3ef 8305 	mrs	r3, IPSR
 80026d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80026e2:	f06f 0303 	mvn.w	r3, #3
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e02c      	b.n	8002744 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	461a      	mov	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	6938      	ldr	r0, [r7, #16]
 80026f8:	f000 ff2e 	bl	8003558 <xQueueReceiveFromISR>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d003      	beq.n	800270a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002702:	f06f 0302 	mvn.w	r3, #2
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e01c      	b.n	8002744 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d019      	beq.n	8002744 <osSemaphoreAcquire+0x94>
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <osSemaphoreAcquire+0xa0>)
 8002712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	e010      	b.n	8002744 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	6938      	ldr	r0, [r7, #16]
 8002726:	f000 fe07 	bl	8003338 <xQueueSemaphoreTake>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d009      	beq.n	8002744 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002736:	f06f 0301 	mvn.w	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e002      	b.n	8002744 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800273e:	f06f 0302 	mvn.w	r3, #2
 8002742:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002744:	697b      	ldr	r3, [r7, #20]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800276a:	f06f 0303 	mvn.w	r3, #3
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e02c      	b.n	80027cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002772:	f3ef 8305 	mrs	r3, IPSR
 8002776:	60fb      	str	r3, [r7, #12]
  return(result);
 8002778:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01a      	beq.n	80027b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	4619      	mov	r1, r3
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f000 fc63 	bl	8003054 <xQueueGiveFromISR>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d003      	beq.n	800279c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002794:	f06f 0302 	mvn.w	r3, #2
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e017      	b.n	80027cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <osSemaphoreRelease+0x78>
 80027a2:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <osSemaphoreRelease+0x84>)
 80027a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	e00b      	b.n	80027cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	6938      	ldr	r0, [r7, #16]
 80027bc:	f000 faaa 	bl	8002d14 <xQueueGenericSend>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80027c6:	f06f 0302 	mvn.w	r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80027cc:	697b      	ldr	r3, [r7, #20]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000ed04 	.word	0xe000ed04

080027dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <vApplicationGetIdleTaskMemory+0x2c>)
 80027ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <vApplicationGetIdleTaskMemory+0x30>)
 80027f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200000dc 	.word	0x200000dc
 800280c:	20000138 	.word	0x20000138

08002810 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a07      	ldr	r2, [pc, #28]	@ (800283c <vApplicationGetTimerTaskMemory+0x2c>)
 8002820:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a06      	ldr	r2, [pc, #24]	@ (8002840 <vApplicationGetTimerTaskMemory+0x30>)
 8002826:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	20000338 	.word	0x20000338
 8002840:	20000394 	.word	0x20000394

08002844 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 0208 	add.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f103 0208 	add.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f103 0208 	add.w	r2, r3, #8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d103      	bne.n	8002906 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e00c      	b.n	8002920 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3308      	adds	r3, #8
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e002      	b.n	8002914 <vListInsert+0x2e>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d2f6      	bcs.n	800290e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6892      	ldr	r2, [r2, #8]
 800296e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6852      	ldr	r2, [r2, #4]
 8002978:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d103      	bne.n	800298c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029d8:	f002 fcae 	bl	8005338 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	22ff      	movs	r2, #255	@ 0xff
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d114      	bne.n	8002a58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3310      	adds	r3, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fc4c 	bl	80042d8 <xTaskRemoveFromEventList>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <xQueueGenericReset+0xd0>)
 8002a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	e009      	b.n	8002a6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3310      	adds	r3, #16
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fef1 	bl	8002844 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3324      	adds	r3, #36	@ 0x24
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff feec 	bl	8002844 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a6c:	f002 fc96 	bl	800539c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a70:	2301      	movs	r3, #1
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	e7fd      	b.n	8002ac6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <xQueueGenericCreateStatic+0x56>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <xQueueGenericCreateStatic+0x5a>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueGenericCreateStatic+0x5c>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	623b      	str	r3, [r7, #32]
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <xQueueGenericCreateStatic+0x84>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <xQueueGenericCreateStatic+0x88>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <xQueueGenericCreateStatic+0x8a>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	61fb      	str	r3, [r7, #28]
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b26:	2350      	movs	r3, #80	@ 0x50
 8002b28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b50      	cmp	r3, #80	@ 0x50
 8002b2e:	d00b      	beq.n	8002b48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	61bb      	str	r3, [r7, #24]
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f840 	bl	8002bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3730      	adds	r7, #48	@ 0x30
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	@ 0x28
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	613b      	str	r3, [r7, #16]
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	e7fd      	b.n	8002ba2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3350      	adds	r3, #80	@ 0x50
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 fce1 	bl	800557c <pvPortMalloc>
 8002bba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d011      	beq.n	8002be6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3350      	adds	r3, #80	@ 0x50
 8002bca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f805 	bl	8002bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002be6:	69bb      	ldr	r3, [r7, #24]
	}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e002      	b.n	8002c12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c1e:	2101      	movs	r1, #1
 8002c20:	69b8      	ldr	r0, [r7, #24]
 8002c22:	f7ff fec3 	bl	80029ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b08a      	sub	sp, #40	@ 0x28
 8002c3a:	af02      	add	r7, sp, #8
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	61bb      	str	r3, [r7, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d90b      	bls.n	8002c80 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	617b      	str	r3, [r7, #20]
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c80:	2302      	movs	r3, #2
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fef8 	bl	8002a80 <xQueueGenericCreateStatic>
 8002c90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
	}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	613b      	str	r3, [r7, #16]
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d90b      	bls.n	8002cf0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	60fb      	str	r3, [r7, #12]
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff40 	bl	8002b7a <xQueueGenericCreate>
 8002cfa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d08:	697b      	ldr	r3, [r7, #20]
	}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	@ 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueGenericSend+0x34>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x42>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSend+0x46>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSend+0x48>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <xQueueGenericSend+0x64>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x72>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0x76>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0x78>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <xQueueGenericSend+0x94>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da8:	f001 fc56 	bl	8004658 <xTaskGetSchedulerState>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <xQueueGenericSend+0xa4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <xQueueGenericSend+0xa8>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <xQueueGenericSend+0xaa>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <xQueueGenericSend+0xc6>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	61fb      	str	r3, [r7, #28]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dda:	f002 faad 	bl	8005338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSend+0xdc>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d129      	bne.n	8002e44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df6:	f000 fc6d 	bl	80036d4 <prvCopyDataToQueue>
 8002dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	3324      	adds	r3, #36	@ 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fa65 	bl	80042d8 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e00a      	b.n	8002e3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e3c:	f002 faae 	bl	800539c <vPortExitCritical>
				return pdPASS;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e063      	b.n	8002f0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4a:	f002 faa7 	bl	800539c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e05c      	b.n	8002f0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fa9f 	bl	80043a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e66:	f002 fa99 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6a:	f001 f80f 	bl	8003e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6e:	f002 fa63 	bl	8005338 <vPortEnterCritical>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <xQueueGenericSend+0x174>
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x18a>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e9e:	f002 fa7d 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fa8e 	bl	80043cc <xTaskCheckForTimeOut>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d124      	bne.n	8002f00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eb8:	f000 fd04 	bl	80038c4 <prvIsQueueFull>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f9b2 	bl	8004234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed2:	f000 fc8f 	bl	80037f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f000 ffe7 	bl	8003ea8 <xTaskResumeAll>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f af7c 	bne.w	8002dda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e772      	b.n	8002dda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef6:	f000 fc7d 	bl	80037f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efa:	f000 ffd5 	bl	8003ea8 <xTaskResumeAll>
 8002efe:	e76c      	b.n	8002dda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f02:	f000 fc77 	bl	80037f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f06:	f000 ffcf 	bl	8003ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3738      	adds	r7, #56	@ 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b090      	sub	sp, #64	@ 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSendFromISR+0x3e>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericSendFromISR+0x42>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericSendFromISR+0x44>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6e>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <xQueueGenericSendFromISR+0x72>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueGenericSendFromISR+0x74>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	623b      	str	r3, [r7, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa8:	f002 faa6 	bl	80054f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fac:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <xQueueGenericSendFromISR+0xc2>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d12f      	bne.n	800303a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ff0:	f000 fb70 	bl	80036d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ff4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d112      	bne.n	8003024 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	3324      	adds	r3, #36	@ 0x24
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f964 	bl	80042d8 <xTaskRemoveFromEventList>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003024:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003028:	3301      	adds	r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	b25a      	sxtb	r2, r3
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003034:	2301      	movs	r3, #1
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003038:	e001      	b.n	800303e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800303a:	2300      	movs	r3, #0
 800303c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003040:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800304a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800304c:	4618      	mov	r0, r3
 800304e:	3740      	adds	r7, #64	@ 0x40
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	@ 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	623b      	str	r3, [r7, #32]
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61fb      	str	r3, [r7, #28]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <xQueueGiveFromISR+0x5c>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <xQueueGiveFromISR+0x60>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <xQueueGiveFromISR+0x62>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	61bb      	str	r3, [r7, #24]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d2:	f002 fa11 	bl	80054f8 <vPortValidateInterruptPriority>
	__asm volatile
 80030d6:	f3ef 8211 	mrs	r2, BASEPRI
 80030da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	617a      	str	r2, [r7, #20]
 80030ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80030ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030fe:	429a      	cmp	r2, r3
 8003100:	d22b      	bcs.n	800315a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003114:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d112      	bne.n	8003144 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	3324      	adds	r3, #36	@ 0x24
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f8d4 	bl	80042d8 <xTaskRemoveFromEventList>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e007      	b.n	8003154 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003148:	3301      	adds	r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	b25a      	sxtb	r2, r3
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003154:	2301      	movs	r3, #1
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
 8003158:	e001      	b.n	800315e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003160:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f383 8811 	msr	BASEPRI, r3
}
 8003168:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800316c:	4618      	mov	r0, r3
 800316e:	3738      	adds	r7, #56	@ 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <xQueueReceive+0x32>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	623b      	str	r3, [r7, #32]
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueReceive+0x40>
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueReceive+0x44>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueReceive+0x46>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <xQueueReceive+0x62>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	61fb      	str	r3, [r7, #28]
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	e7fd      	b.n	80031d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d6:	f001 fa3f 	bl	8004658 <xTaskGetSchedulerState>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <xQueueReceive+0x72>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueReceive+0x76>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueReceive+0x78>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueReceive+0x94>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61bb      	str	r3, [r7, #24]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003208:	f002 f896 	bl	8005338 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01f      	beq.n	8003258 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800321c:	f000 fac4 	bl	80037a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	3310      	adds	r3, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f84f 	bl	80042d8 <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003240:	4b3c      	ldr	r3, [pc, #240]	@ (8003334 <xQueueReceive+0x1c0>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003250:	f002 f8a4 	bl	800539c <vPortExitCritical>
				return pdPASS;
 8003254:	2301      	movs	r3, #1
 8003256:	e069      	b.n	800332c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800325e:	f002 f89d 	bl	800539c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003262:	2300      	movs	r3, #0
 8003264:	e062      	b.n	800332c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f001 f895 	bl	80043a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003276:	2301      	movs	r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800327a:	f002 f88f 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800327e:	f000 fe05 	bl	8003e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003282:	f002 f859 	bl	8005338 <vPortEnterCritical>
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800328c:	b25b      	sxtb	r3, r3
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d103      	bne.n	800329c <xQueueReceive+0x128>
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d103      	bne.n	80032b2 <xQueueReceive+0x13e>
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b2:	f002 f873 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b6:	1d3a      	adds	r2, r7, #4
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f884 	bl	80043cc <xTaskCheckForTimeOut>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d123      	bne.n	8003312 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032cc:	f000 fae4 	bl	8003898 <prvIsQueueEmpty>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d017      	beq.n	8003306 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	3324      	adds	r3, #36	@ 0x24
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffa8 	bl	8004234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032e6:	f000 fa85 	bl	80037f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032ea:	f000 fddd 	bl	8003ea8 <xTaskResumeAll>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d189      	bne.n	8003208 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <xQueueReceive+0x1c0>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	e780      	b.n	8003208 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003308:	f000 fa74 	bl	80037f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800330c:	f000 fdcc 	bl	8003ea8 <xTaskResumeAll>
 8003310:	e77a      	b.n	8003208 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003314:	f000 fa6e 	bl	80037f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003318:	f000 fdc6 	bl	8003ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800331c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800331e:	f000 fabb 	bl	8003898 <prvIsQueueEmpty>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f43f af6f 	beq.w	8003208 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800332a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800332c:	4618      	mov	r0, r3
 800332e:	3730      	adds	r7, #48	@ 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	@ 0x38
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	623b      	str	r3, [r7, #32]
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61fb      	str	r3, [r7, #28]
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800338c:	f001 f964 	bl	8004658 <xTaskGetSchedulerState>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <xQueueSemaphoreTake+0x64>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <xQueueSemaphoreTake+0x68>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <xQueueSemaphoreTake+0x6a>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	61bb      	str	r3, [r7, #24]
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	e7fd      	b.n	80033ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033be:	f001 ffbb 	bl	8005338 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d024      	beq.n	8003418 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033de:	f001 fab5 	bl	800494c <pvTaskIncrementMutexHeldCount>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00f      	beq.n	8003410 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f2:	3310      	adds	r3, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff6f 	bl	80042d8 <xTaskRemoveFromEventList>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003400:	4b54      	ldr	r3, [pc, #336]	@ (8003554 <xQueueSemaphoreTake+0x21c>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003410:	f001 ffc4 	bl	800539c <vPortExitCritical>
				return pdPASS;
 8003414:	2301      	movs	r3, #1
 8003416:	e098      	b.n	800354a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	617b      	str	r3, [r7, #20]
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800343c:	f001 ffae 	bl	800539c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003440:	2300      	movs	r3, #0
 8003442:	e082      	b.n	800354a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	4618      	mov	r0, r3
 8003450:	f000 ffa6 	bl	80043a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003458:	f001 ffa0 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800345c:	f000 fd16 	bl	8003e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003460:	f001 ff6a 	bl	8005338 <vPortEnterCritical>
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800346a:	b25b      	sxtb	r3, r3
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d103      	bne.n	800347a <xQueueSemaphoreTake+0x142>
 8003472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800347a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003480:	b25b      	sxtb	r3, r3
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d103      	bne.n	8003490 <xQueueSemaphoreTake+0x158>
 8003488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003490:	f001 ff84 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003494:	463a      	mov	r2, r7
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ff95 	bl	80043cc <xTaskCheckForTimeOut>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d132      	bne.n	800350e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034aa:	f000 f9f5 	bl	8003898 <prvIsQueueEmpty>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d026      	beq.n	8003502 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80034bc:	f001 ff3c 	bl	8005338 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 f8e5 	bl	8004694 <xTaskPriorityInherit>
 80034ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80034cc:	f001 ff66 	bl	800539c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d2:	3324      	adds	r3, #36	@ 0x24
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 feab 	bl	8004234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034e0:	f000 f988 	bl	80037f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e4:	f000 fce0 	bl	8003ea8 <xTaskResumeAll>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f af67 	bne.w	80033be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80034f0:	4b18      	ldr	r3, [pc, #96]	@ (8003554 <xQueueSemaphoreTake+0x21c>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e75d      	b.n	80033be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003504:	f000 f976 	bl	80037f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003508:	f000 fcce 	bl	8003ea8 <xTaskResumeAll>
 800350c:	e757      	b.n	80033be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800350e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003510:	f000 f970 	bl	80037f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003514:	f000 fcc8 	bl	8003ea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003518:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800351a:	f000 f9bd 	bl	8003898 <prvIsQueueEmpty>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f43f af4c 	beq.w	80033be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800352c:	f001 ff04 	bl	8005338 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003530:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003532:	f000 f8b7 	bl	80036a4 <prvGetDisinheritPriorityAfterTimeout>
 8003536:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f980 	bl	8004844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003544:	f001 ff2a 	bl	800539c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800354a:	4618      	mov	r0, r3
 800354c:	3738      	adds	r7, #56	@ 0x38
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	@ 0x38
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	623b      	str	r3, [r7, #32]
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	e7fd      	b.n	8003582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <xQueueReceiveFromISR+0x3c>
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <xQueueReceiveFromISR+0x40>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <xQueueReceiveFromISR+0x42>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61fb      	str	r3, [r7, #28]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b6:	f001 ff9f 	bl	80054f8 <vPortValidateInterruptPriority>
	__asm volatile
 80035ba:	f3ef 8211 	mrs	r2, BASEPRI
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61ba      	str	r2, [r7, #24]
 80035d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d02f      	beq.n	8003642 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035f0:	f000 f8da 	bl	80037a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d112      	bne.n	800362c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	3310      	adds	r3, #16
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fe60 	bl	80042d8 <xTaskRemoveFromEventList>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e007      	b.n	800363c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800362c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003630:	3301      	adds	r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	b25a      	sxtb	r2, r3
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003640:	e001      	b.n	8003646 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003642:	2300      	movs	r3, #0
 8003644:	637b      	str	r3, [r7, #52]	@ 0x34
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f383 8811 	msr	BASEPRI, r3
}
 8003650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003654:	4618      	mov	r0, r3
 8003656:	3738      	adds	r7, #56	@ 0x38
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <vQueueDelete+0x2a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60bb      	str	r3, [r7, #8]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f95e 	bl	8003948 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003692:	2b00      	cmp	r3, #0
 8003694:	d102      	bne.n	800369c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f002 f83e 	bl	8005718 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d006      	beq.n	80036c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e001      	b.n	80036c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036c6:	68fb      	ldr	r3, [r7, #12]
	}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d14d      	bne.n	8003796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f830 	bl	8004764 <xTaskPriorityDisinherit>
 8003704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	e043      	b.n	8003796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d119      	bne.n	8003748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6858      	ldr	r0, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	461a      	mov	r2, r3
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	f002 f946 	bl	80059b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	441a      	add	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d32b      	bcc.n	8003796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e026      	b.n	8003796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68d8      	ldr	r0, [r3, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	461a      	mov	r2, r3
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	f002 f92c 	bl	80059b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	425b      	negs	r3, r3
 8003762:	441a      	add	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d207      	bcs.n	8003784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	425b      	negs	r3, r3
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d105      	bne.n	8003796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	3b01      	subs	r3, #1
 8003794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800379e:	697b      	ldr	r3, [r7, #20]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d303      	bcc.n	80037dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	461a      	mov	r2, r3
 80037e6:	6838      	ldr	r0, [r7, #0]
 80037e8:	f002 f8e2 	bl	80059b0 <memcpy>
	}
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037fc:	f001 fd9c 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003808:	e011      	b.n	800382e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3324      	adds	r3, #36	@ 0x24
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fd5e 	bl	80042d8 <xTaskRemoveFromEventList>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003822:	f000 fe37 	bl	8004494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	3b01      	subs	r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	dce9      	bgt.n	800380a <prvUnlockQueue+0x16>
 8003836:	e000      	b.n	800383a <prvUnlockQueue+0x46>
					break;
 8003838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	22ff      	movs	r2, #255	@ 0xff
 800383e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003842:	f001 fdab 	bl	800539c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003846:	f001 fd77 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003852:	e011      	b.n	8003878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3310      	adds	r3, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fd39 	bl	80042d8 <xTaskRemoveFromEventList>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800386c:	f000 fe12 	bl	8004494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	3b01      	subs	r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387c:	2b00      	cmp	r3, #0
 800387e:	dce9      	bgt.n	8003854 <prvUnlockQueue+0x60>
 8003880:	e000      	b.n	8003884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	22ff      	movs	r2, #255	@ 0xff
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800388c:	f001 fd86 	bl	800539c <vPortExitCritical>
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038a0:	f001 fd4a 	bl	8005338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e001      	b.n	80038b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038b6:	f001 fd71 	bl	800539c <vPortExitCritical>

	return xReturn;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038cc:	f001 fd34 	bl	8005338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d102      	bne.n	80038e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e001      	b.n	80038e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038e6:	f001 fd59 	bl	800539c <vPortExitCritical>

	return xReturn;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e014      	b.n	800392e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003904:	4a0f      	ldr	r2, [pc, #60]	@ (8003944 <vQueueAddToRegistry+0x50>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003910:	490c      	ldr	r1, [pc, #48]	@ (8003944 <vQueueAddToRegistry+0x50>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <vQueueAddToRegistry+0x50>)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003926:	e006      	b.n	8003936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b07      	cmp	r3, #7
 8003932:	d9e7      	bls.n	8003904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000794 	.word	0x20000794

08003948 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e016      	b.n	8003984 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003956:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <vQueueUnregisterQueue+0x50>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d10b      	bne.n	800397e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003966:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <vQueueUnregisterQueue+0x50>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2100      	movs	r1, #0
 800396c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003970:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <vQueueUnregisterQueue+0x50>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	2200      	movs	r2, #0
 800397a:	605a      	str	r2, [r3, #4]
				break;
 800397c:	e006      	b.n	800398c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b07      	cmp	r3, #7
 8003988:	d9e5      	bls.n	8003956 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20000794 	.word	0x20000794

0800399c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039ac:	f001 fcc4 	bl	8005338 <vPortEnterCritical>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d103      	bne.n	80039c6 <vQueueWaitForMessageRestricted+0x2a>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d103      	bne.n	80039dc <vQueueWaitForMessageRestricted+0x40>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039dc:	f001 fcde 	bl	800539c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3324      	adds	r3, #36	@ 0x24
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fc45 	bl	8004280 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff fefc 	bl	80037f4 <prvUnlockQueue>
	}
 80039fc:	bf00      	nop
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	@ 0x38
 8003a08:	af04      	add	r7, sp, #16
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	623b      	str	r3, [r7, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	61fb      	str	r3, [r7, #28]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a4e:	235c      	movs	r3, #92	@ 0x5c
 8003a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b5c      	cmp	r3, #92	@ 0x5c
 8003a56:	d00b      	beq.n	8003a70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	61bb      	str	r3, [r7, #24]
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01e      	beq.n	8003ab6 <xTaskCreateStatic+0xb2>
 8003a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01b      	beq.n	8003ab6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a90:	2300      	movs	r3, #0
 8003a92:	9303      	str	r3, [sp, #12]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	9302      	str	r3, [sp, #8]
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f850 	bl	8003b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ab0:	f000 f8de 	bl	8003c70 <prvAddNewTaskToReadyList>
 8003ab4:	e001      	b.n	8003aba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003aba:	697b      	ldr	r3, [r7, #20]
	}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	@ 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	@ 0x30
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fd4f 	bl	800557c <pvPortMalloc>
 8003ade:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ae6:	205c      	movs	r0, #92	@ 0x5c
 8003ae8:	f001 fd48 	bl	800557c <pvPortMalloc>
 8003aec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003afa:	e005      	b.n	8003b08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f001 fe0b 	bl	8005718 <vPortFree>
 8003b02:	e001      	b.n	8003b08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9303      	str	r3, [sp, #12]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f80e 	bl	8003b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b32:	69f8      	ldr	r0, [r7, #28]
 8003b34:	f000 f89c 	bl	8003c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e002      	b.n	8003b44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b44:	69bb      	ldr	r3, [r7, #24]
	}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	21a5      	movs	r1, #165	@ 0xa5
 8003b68:	f001 fef6 	bl	8005958 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b76:	3b01      	subs	r3, #1
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f023 0307 	bic.w	r3, r3, #7
 8003b84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	617b      	str	r3, [r7, #20]
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01f      	beq.n	8003bee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e012      	b.n	8003bda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	7819      	ldrb	r1, [r3, #0]
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3334      	adds	r3, #52	@ 0x34
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d9e9      	bls.n	8003bb4 <prvInitialiseNewTask+0x66>
 8003be0:	e000      	b.n	8003be4 <prvInitialiseNewTask+0x96>
			{
				break;
 8003be2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bec:	e003      	b.n	8003bf6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	2b37      	cmp	r3, #55	@ 0x37
 8003bfa:	d901      	bls.n	8003c00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bfc:	2337      	movs	r3, #55	@ 0x37
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	2200      	movs	r2, #0
 8003c10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	3304      	adds	r3, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fe34 	bl	8002884 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fe2f 	bl	8002884 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	2200      	movs	r2, #0
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	69b8      	ldr	r0, [r7, #24]
 8003c50:	f001 fa3e 	bl	80050d0 <pxPortInitialiseStack>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c66:	bf00      	nop
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c78:	f001 fb5e 	bl	8005338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c86:	4b2c      	ldr	r3, [pc, #176]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <prvAddNewTaskToReadyList+0xc4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d110      	bne.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c9c:	f000 fc1e 	bl	80044dc <prvInitialiseTaskLists>
 8003ca0:	e00d      	b.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ca2:	4b26      	ldr	r3, [pc, #152]	@ (8003d3c <prvAddNewTaskToReadyList+0xcc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003caa:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d802      	bhi.n	8003cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <prvAddNewTaskToReadyList+0xd0>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <prvAddNewTaskToReadyList+0xd4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d903      	bls.n	8003ce4 <prvAddNewTaskToReadyList+0x74>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <prvAddNewTaskToReadyList+0xd4>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4a15      	ldr	r2, [pc, #84]	@ (8003d48 <prvAddNewTaskToReadyList+0xd8>)
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f7fe fdcf 	bl	800289e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d00:	f001 fb4c 	bl	800539c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <prvAddNewTaskToReadyList+0xcc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <prvAddNewTaskToReadyList+0xc8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d207      	bcs.n	8003d2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <prvAddNewTaskToReadyList+0xdc>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000ca8 	.word	0x20000ca8
 8003d38:	200007d4 	.word	0x200007d4
 8003d3c:	20000cb4 	.word	0x20000cb4
 8003d40:	20000cc4 	.word	0x20000cc4
 8003d44:	20000cb0 	.word	0x20000cb0
 8003d48:	200007d8 	.word	0x200007d8
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d62:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <vTaskDelay+0x64>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <vTaskDelay+0x32>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60bb      	str	r3, [r7, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d82:	f000 f883 	bl	8003e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d86:	2100      	movs	r1, #0
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fdf3 	bl	8004974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d8e:	f000 f88b 	bl	8003ea8 <xTaskResumeAll>
 8003d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <vTaskDelay+0x68>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000cd0 	.word	0x20000cd0
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dca:	463a      	mov	r2, r7
 8003dcc:	1d39      	adds	r1, r7, #4
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fd02 	bl	80027dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	460a      	mov	r2, r1
 8003dea:	4922      	ldr	r1, [pc, #136]	@ (8003e74 <vTaskStartScheduler+0xb8>)
 8003dec:	4822      	ldr	r0, [pc, #136]	@ (8003e78 <vTaskStartScheduler+0xbc>)
 8003dee:	f7ff fe09 	bl	8003a04 <xTaskCreateStatic>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4a21      	ldr	r2, [pc, #132]	@ (8003e7c <vTaskStartScheduler+0xc0>)
 8003df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003df8:	4b20      	ldr	r3, [pc, #128]	@ (8003e7c <vTaskStartScheduler+0xc0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e001      	b.n	8003e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e10:	f000 fe04 	bl	8004a1c <xTimerCreateTimerTask>
 8003e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d116      	bne.n	8003e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <vTaskStartScheduler+0xc4>)
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <vTaskStartScheduler+0xc8>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e3e:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <vTaskStartScheduler+0xcc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e44:	f001 f9d4 	bl	80051f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e48:	e00f      	b.n	8003e6a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d10b      	bne.n	8003e6a <vTaskStartScheduler+0xae>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <vTaskStartScheduler+0xaa>
}
 8003e6a:	bf00      	nop
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	08005a2c 	.word	0x08005a2c
 8003e78:	080044ad 	.word	0x080044ad
 8003e7c:	20000ccc 	.word	0x20000ccc
 8003e80:	20000cc8 	.word	0x20000cc8
 8003e84:	20000cb4 	.word	0x20000cb4
 8003e88:	20000cac 	.word	0x20000cac

08003e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <vTaskSuspendAll+0x18>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a03      	ldr	r2, [pc, #12]	@ (8003ea4 <vTaskSuspendAll+0x18>)
 8003e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000cd0 	.word	0x20000cd0

08003ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eb6:	4b42      	ldr	r3, [pc, #264]	@ (8003fc0 <xTaskResumeAll+0x118>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	603b      	str	r3, [r7, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ed6:	f001 fa2f 	bl	8005338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003eda:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <xTaskResumeAll+0x118>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	4a37      	ldr	r2, [pc, #220]	@ (8003fc0 <xTaskResumeAll+0x118>)
 8003ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee4:	4b36      	ldr	r3, [pc, #216]	@ (8003fc0 <xTaskResumeAll+0x118>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d162      	bne.n	8003fb2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eec:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <xTaskResumeAll+0x11c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05e      	beq.n	8003fb2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ef4:	e02f      	b.n	8003f56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef6:	4b34      	ldr	r3, [pc, #208]	@ (8003fc8 <xTaskResumeAll+0x120>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3318      	adds	r3, #24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fd28 	bl	8002958 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fd23 	bl	8002958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f16:	4b2d      	ldr	r3, [pc, #180]	@ (8003fcc <xTaskResumeAll+0x124>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d903      	bls.n	8003f26 <xTaskResumeAll+0x7e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <xTaskResumeAll+0x124>)
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <xTaskResumeAll+0x128>)
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe fcae 	bl	800289e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	4b23      	ldr	r3, [pc, #140]	@ (8003fd4 <xTaskResumeAll+0x12c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f50:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <xTaskResumeAll+0x130>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f56:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc8 <xTaskResumeAll+0x120>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1cb      	bne.n	8003ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f64:	f000 fb58 	bl	8004618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f68:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <xTaskResumeAll+0x134>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d010      	beq.n	8003f96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f74:	f000 f846 	bl	8004004 <xTaskIncrementTick>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003f7e:	4b16      	ldr	r3, [pc, #88]	@ (8003fd8 <xTaskResumeAll+0x130>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f1      	bne.n	8003f74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003f90:	4b12      	ldr	r3, [pc, #72]	@ (8003fdc <xTaskResumeAll+0x134>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <xTaskResumeAll+0x130>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe0 <xTaskResumeAll+0x138>)
 8003fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fb2:	f001 f9f3 	bl	800539c <vPortExitCritical>

	return xAlreadyYielded;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000cd0 	.word	0x20000cd0
 8003fc4:	20000ca8 	.word	0x20000ca8
 8003fc8:	20000c68 	.word	0x20000c68
 8003fcc:	20000cb0 	.word	0x20000cb0
 8003fd0:	200007d8 	.word	0x200007d8
 8003fd4:	200007d4 	.word	0x200007d4
 8003fd8:	20000cbc 	.word	0x20000cbc
 8003fdc:	20000cb8 	.word	0x20000cb8
 8003fe0:	e000ed04 	.word	0xe000ed04

08003fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fea:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <xTaskGetTickCount+0x1c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ff0:	687b      	ldr	r3, [r7, #4]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000cac 	.word	0x20000cac

08004004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b4f      	ldr	r3, [pc, #316]	@ (800414c <xTaskIncrementTick+0x148>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 8090 	bne.w	8004138 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004018:	4b4d      	ldr	r3, [pc, #308]	@ (8004150 <xTaskIncrementTick+0x14c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004020:	4a4b      	ldr	r2, [pc, #300]	@ (8004150 <xTaskIncrementTick+0x14c>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d121      	bne.n	8004070 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800402c:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <xTaskIncrementTick+0x150>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	603b      	str	r3, [r7, #0]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xTaskIncrementTick+0x46>
 800404e:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <xTaskIncrementTick+0x150>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <xTaskIncrementTick+0x154>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3e      	ldr	r2, [pc, #248]	@ (8004154 <xTaskIncrementTick+0x150>)
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4a3e      	ldr	r2, [pc, #248]	@ (8004158 <xTaskIncrementTick+0x154>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <xTaskIncrementTick+0x158>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a3c      	ldr	r2, [pc, #240]	@ (800415c <xTaskIncrementTick+0x158>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	f000 fad4 	bl	8004618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004070:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <xTaskIncrementTick+0x15c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	429a      	cmp	r2, r3
 8004078:	d349      	bcc.n	800410e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407a:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <xTaskIncrementTick+0x150>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <xTaskIncrementTick+0x15c>)
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	601a      	str	r2, [r3, #0]
					break;
 800408c:	e03f      	b.n	800410e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408e:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <xTaskIncrementTick+0x150>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d203      	bcs.n	80040ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004160 <xTaskIncrementTick+0x15c>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040ac:	e02f      	b.n	800410e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fc50 	bl	8002958 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3318      	adds	r3, #24
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fc47 	bl	8002958 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <xTaskIncrementTick+0x160>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <xTaskIncrementTick+0xda>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <xTaskIncrementTick+0x160>)
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004168 <xTaskIncrementTick+0x164>)
 80040ec:	441a      	add	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7fe fbd2 	bl	800289e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fe:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <xTaskIncrementTick+0x168>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d3b8      	bcc.n	800407a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410c:	e7b5      	b.n	800407a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <xTaskIncrementTick+0x168>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	4914      	ldr	r1, [pc, #80]	@ (8004168 <xTaskIncrementTick+0x164>)
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d901      	bls.n	800412a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004126:	2301      	movs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800412a:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <xTaskIncrementTick+0x16c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e004      	b.n	8004142 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004138:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <xTaskIncrementTick+0x170>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <xTaskIncrementTick+0x170>)
 8004140:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004142:	697b      	ldr	r3, [r7, #20]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000cd0 	.word	0x20000cd0
 8004150:	20000cac 	.word	0x20000cac
 8004154:	20000c60 	.word	0x20000c60
 8004158:	20000c64 	.word	0x20000c64
 800415c:	20000cc0 	.word	0x20000cc0
 8004160:	20000cc8 	.word	0x20000cc8
 8004164:	20000cb0 	.word	0x20000cb0
 8004168:	200007d8 	.word	0x200007d8
 800416c:	200007d4 	.word	0x200007d4
 8004170:	20000cbc 	.word	0x20000cbc
 8004174:	20000cb8 	.word	0x20000cb8

08004178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800417e:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <vTaskSwitchContext+0xa8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004186:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <vTaskSwitchContext+0xac>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800418c:	e042      	b.n	8004214 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800418e:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <vTaskSwitchContext+0xac>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004194:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <vTaskSwitchContext+0xb0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e011      	b.n	80041c0 <vTaskSwitchContext+0x48>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <vTaskSwitchContext+0x42>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	e7fd      	b.n	80041b6 <vTaskSwitchContext+0x3e>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b01      	subs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	491a      	ldr	r1, [pc, #104]	@ (800422c <vTaskSwitchContext+0xb4>)
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0e3      	beq.n	800419c <vTaskSwitchContext+0x24>
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4a13      	ldr	r2, [pc, #76]	@ (800422c <vTaskSwitchContext+0xb4>)
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3308      	adds	r3, #8
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d104      	bne.n	8004204 <vTaskSwitchContext+0x8c>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <vTaskSwitchContext+0xb8>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4a06      	ldr	r2, [pc, #24]	@ (8004228 <vTaskSwitchContext+0xb0>)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000cd0 	.word	0x20000cd0
 8004224:	20000cbc 	.word	0x20000cbc
 8004228:	20000cb0 	.word	0x20000cb0
 800422c:	200007d8 	.word	0x200007d8
 8004230:	200007d4 	.word	0x200007d4

08004234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800425c:	4b07      	ldr	r3, [pc, #28]	@ (800427c <vTaskPlaceOnEventList+0x48>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3318      	adds	r3, #24
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fe fb3e 	bl	80028e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800426a:	2101      	movs	r1, #1
 800426c:	6838      	ldr	r0, [r7, #0]
 800426e:	f000 fb81 	bl	8004974 <prvAddCurrentTaskToDelayedList>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200007d4 	.word	0x200007d4

08004280 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	617b      	str	r3, [r7, #20]
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4619      	mov	r1, r3
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7fe faf3 	bl	800289e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 fb54 	bl	8004974 <prvAddCurrentTaskToDelayedList>
	}
 80042cc:	bf00      	nop
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200007d4 	.word	0x200007d4

080042d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60fb      	str	r3, [r7, #12]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	3318      	adds	r3, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fb24 	bl	8002958 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004310:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <xTaskRemoveFromEventList+0xb0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fb1b 	bl	8002958 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <xTaskRemoveFromEventList+0xb4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d903      	bls.n	8004336 <xTaskRemoveFromEventList+0x5e>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	4a16      	ldr	r2, [pc, #88]	@ (800438c <xTaskRemoveFromEventList+0xb4>)
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a13      	ldr	r2, [pc, #76]	@ (8004390 <xTaskRemoveFromEventList+0xb8>)
 8004344:	441a      	add	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe faa6 	bl	800289e <vListInsertEnd>
 8004352:	e005      	b.n	8004360 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	3318      	adds	r3, #24
 8004358:	4619      	mov	r1, r3
 800435a:	480e      	ldr	r0, [pc, #56]	@ (8004394 <xTaskRemoveFromEventList+0xbc>)
 800435c:	f7fe fa9f 	bl	800289e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004364:	4b0c      	ldr	r3, [pc, #48]	@ (8004398 <xTaskRemoveFromEventList+0xc0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d905      	bls.n	800437a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <xTaskRemoveFromEventList+0xc4>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e001      	b.n	800437e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800437e:	697b      	ldr	r3, [r7, #20]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000cd0 	.word	0x20000cd0
 800438c:	20000cb0 	.word	0x20000cb0
 8004390:	200007d8 	.word	0x200007d8
 8004394:	20000c68 	.word	0x20000c68
 8004398:	200007d4 	.word	0x200007d4
 800439c:	20000cbc 	.word	0x20000cbc

080043a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <vTaskInternalSetTimeOutState+0x24>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <vTaskInternalSetTimeOutState+0x28>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	20000cc0 	.word	0x20000cc0
 80043c8:	20000cac 	.word	0x20000cac

080043cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	613b      	str	r3, [r7, #16]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60fb      	str	r3, [r7, #12]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004412:	f000 ff91 	bl	8005338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <xTaskCheckForTimeOut+0xc0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d102      	bne.n	8004436 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e023      	b.n	800447e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <xTaskCheckForTimeOut+0xc4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d007      	beq.n	8004452 <xTaskCheckForTimeOut+0x86>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e015      	b.n	800447e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	d20b      	bcs.n	8004474 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad2      	subs	r2, r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff99 	bl	80043a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e004      	b.n	800447e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800447a:	2301      	movs	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800447e:	f000 ff8d 	bl	800539c <vPortExitCritical>

	return xReturn;
 8004482:	69fb      	ldr	r3, [r7, #28]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000cac 	.word	0x20000cac
 8004490:	20000cc0 	.word	0x20000cc0

08004494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <vTaskMissedYield+0x14>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000cbc 	.word	0x20000cbc

080044ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044b4:	f000 f852 	bl	800455c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044b8:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <prvIdleTask+0x28>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d9f9      	bls.n	80044b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <prvIdleTask+0x2c>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044d0:	e7f0      	b.n	80044b4 <prvIdleTask+0x8>
 80044d2:	bf00      	nop
 80044d4:	200007d8 	.word	0x200007d8
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e2:	2300      	movs	r3, #0
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	e00c      	b.n	8004502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4a12      	ldr	r2, [pc, #72]	@ (800453c <prvInitialiseTaskLists+0x60>)
 80044f4:	4413      	add	r3, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe f9a4 	bl	8002844 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3301      	adds	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b37      	cmp	r3, #55	@ 0x37
 8004506:	d9ef      	bls.n	80044e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004508:	480d      	ldr	r0, [pc, #52]	@ (8004540 <prvInitialiseTaskLists+0x64>)
 800450a:	f7fe f99b 	bl	8002844 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800450e:	480d      	ldr	r0, [pc, #52]	@ (8004544 <prvInitialiseTaskLists+0x68>)
 8004510:	f7fe f998 	bl	8002844 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004514:	480c      	ldr	r0, [pc, #48]	@ (8004548 <prvInitialiseTaskLists+0x6c>)
 8004516:	f7fe f995 	bl	8002844 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800451a:	480c      	ldr	r0, [pc, #48]	@ (800454c <prvInitialiseTaskLists+0x70>)
 800451c:	f7fe f992 	bl	8002844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004520:	480b      	ldr	r0, [pc, #44]	@ (8004550 <prvInitialiseTaskLists+0x74>)
 8004522:	f7fe f98f 	bl	8002844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <prvInitialiseTaskLists+0x78>)
 8004528:	4a05      	ldr	r2, [pc, #20]	@ (8004540 <prvInitialiseTaskLists+0x64>)
 800452a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <prvInitialiseTaskLists+0x7c>)
 800452e:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <prvInitialiseTaskLists+0x68>)
 8004530:	601a      	str	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200007d8 	.word	0x200007d8
 8004540:	20000c38 	.word	0x20000c38
 8004544:	20000c4c 	.word	0x20000c4c
 8004548:	20000c68 	.word	0x20000c68
 800454c:	20000c7c 	.word	0x20000c7c
 8004550:	20000c94 	.word	0x20000c94
 8004554:	20000c60 	.word	0x20000c60
 8004558:	20000c64 	.word	0x20000c64

0800455c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004562:	e019      	b.n	8004598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004564:	f000 fee8 	bl	8005338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004568:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <prvCheckTasksWaitingTermination+0x50>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe f9ef 	bl	8002958 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <prvCheckTasksWaitingTermination+0x54>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	4a0b      	ldr	r2, [pc, #44]	@ (80045b0 <prvCheckTasksWaitingTermination+0x54>)
 8004582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <prvCheckTasksWaitingTermination+0x58>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <prvCheckTasksWaitingTermination+0x58>)
 800458c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800458e:	f000 ff05 	bl	800539c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f810 	bl	80045b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <prvCheckTasksWaitingTermination+0x58>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e1      	bne.n	8004564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000c7c 	.word	0x20000c7c
 80045b0:	20000ca8 	.word	0x20000ca8
 80045b4:	20000c90 	.word	0x20000c90

080045b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f8a2 	bl	8005718 <vPortFree>
				vPortFree( pxTCB );
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 f89f 	bl	8005718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045da:	e019      	b.n	8004610 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d103      	bne.n	80045ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f896 	bl	8005718 <vPortFree>
	}
 80045ec:	e010      	b.n	8004610 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d00b      	beq.n	8004610 <prvDeleteTCB+0x58>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <prvDeleteTCB+0x54>
	}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800461e:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <prvResetNextTaskUnblockTime+0x38>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <prvResetNextTaskUnblockTime+0x3c>)
 800462a:	f04f 32ff 	mov.w	r2, #4294967295
 800462e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004630:	e008      	b.n	8004644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <prvResetNextTaskUnblockTime+0x38>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a04      	ldr	r2, [pc, #16]	@ (8004654 <prvResetNextTaskUnblockTime+0x3c>)
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000c60 	.word	0x20000c60
 8004654:	20000cc8 	.word	0x20000cc8

08004658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <xTaskGetSchedulerState+0x34>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004666:	2301      	movs	r3, #1
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	e008      	b.n	800467e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <xTaskGetSchedulerState+0x38>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004674:	2302      	movs	r3, #2
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e001      	b.n	800467e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800467e:	687b      	ldr	r3, [r7, #4]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20000cb4 	.word	0x20000cb4
 8004690:	20000cd0 	.word	0x20000cd0

08004694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d051      	beq.n	800474e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004758 <xTaskPriorityInherit+0xc4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d241      	bcs.n	800473c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db06      	blt.n	80046ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c0:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <xTaskPriorityInherit+0xc4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6959      	ldr	r1, [r3, #20]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4a1f      	ldr	r2, [pc, #124]	@ (800475c <xTaskPriorityInherit+0xc8>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4299      	cmp	r1, r3
 80046e4:	d122      	bne.n	800472c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe f934 	bl	8002958 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <xTaskPriorityInherit+0xc4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fe:	4b18      	ldr	r3, [pc, #96]	@ (8004760 <xTaskPriorityInherit+0xcc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d903      	bls.n	800470e <xTaskPriorityInherit+0x7a>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <xTaskPriorityInherit+0xcc>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a10      	ldr	r2, [pc, #64]	@ (800475c <xTaskPriorityInherit+0xc8>)
 800471c:	441a      	add	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fe f8ba 	bl	800289e <vListInsertEnd>
 800472a:	e004      	b.n	8004736 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800472c:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <xTaskPriorityInherit+0xc4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e008      	b.n	800474e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <xTaskPriorityInherit+0xc4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	429a      	cmp	r2, r3
 8004748:	d201      	bcs.n	800474e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800474e:	68fb      	ldr	r3, [r7, #12]
	}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200007d4 	.word	0x200007d4
 800475c:	200007d8 	.word	0x200007d8
 8004760:	20000cb0 	.word	0x20000cb0

08004764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d058      	beq.n	800482c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800477a:	4b2f      	ldr	r3, [pc, #188]	@ (8004838 <xTaskPriorityDisinherit+0xd4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	429a      	cmp	r2, r3
 8004782:	d00b      	beq.n	800479c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60fb      	str	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60bb      	str	r3, [r7, #8]
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d02c      	beq.n	800482c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d128      	bne.n	800482c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe f8ba 	bl	8002958 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <xTaskPriorityDisinherit+0xd8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d903      	bls.n	800480c <xTaskPriorityDisinherit+0xa8>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	4a0c      	ldr	r2, [pc, #48]	@ (800483c <xTaskPriorityDisinherit+0xd8>)
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <xTaskPriorityDisinherit+0xdc>)
 800481a:	441a      	add	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f7fe f83b 	bl	800289e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800482c:	697b      	ldr	r3, [r7, #20]
	}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200007d4 	.word	0x200007d4
 800483c:	20000cb0 	.word	0x20000cb0
 8004840:	200007d8 	.word	0x200007d8

08004844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d06c      	beq.n	8004936 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60fb      	str	r3, [r7, #12]
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d902      	bls.n	800488c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e002      	b.n	8004892 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004890:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	429a      	cmp	r2, r3
 800489a:	d04c      	beq.n	8004936 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d147      	bne.n	8004936 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80048a6:	4b26      	ldr	r3, [pc, #152]	@ (8004940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d10b      	bne.n	80048c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60bb      	str	r3, [r7, #8]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db04      	blt.n	80048e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048f6:	4413      	add	r3, r2
 80048f8:	4299      	cmp	r1, r3
 80048fa:	d11c      	bne.n	8004936 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7fe f829 	bl	8002958 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490a:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d903      	bls.n	800491a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	4a0c      	ldr	r2, [pc, #48]	@ (8004948 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004928:	441a      	add	r2, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3304      	adds	r3, #4
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fd ffb4 	bl	800289e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004936:	bf00      	nop
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	200007d4 	.word	0x200007d4
 8004944:	200007d8 	.word	0x200007d8
 8004948:	20000cb0 	.word	0x20000cb0

0800494c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <pvTaskIncrementMutexHeldCount+0x24>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <pvTaskIncrementMutexHeldCount+0x24>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800495e:	3201      	adds	r2, #1
 8004960:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004962:	4b03      	ldr	r3, [pc, #12]	@ (8004970 <pvTaskIncrementMutexHeldCount+0x24>)
 8004964:	681b      	ldr	r3, [r3, #0]
	}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	200007d4 	.word	0x200007d4

08004974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800497e:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <prvAddCurrentTaskToDelayedList+0x90>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004984:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd ffe4 	bl	8002958 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d10a      	bne.n	80049ae <prvAddCurrentTaskToDelayedList+0x3a>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4819      	ldr	r0, [pc, #100]	@ (8004a0c <prvAddCurrentTaskToDelayedList+0x98>)
 80049a8:	f7fd ff79 	bl	800289e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049ac:	e026      	b.n	80049fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049b6:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d209      	bcs.n	80049da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c6:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fd ff87 	bl	80028e6 <vListInsert>
}
 80049d8:	e010      	b.n	80049fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049da:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fd ff7d 	bl	80028e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d202      	bcs.n	80049fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049f6:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6013      	str	r3, [r2, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000cac 	.word	0x20000cac
 8004a08:	200007d4 	.word	0x200007d4
 8004a0c:	20000c94 	.word	0x20000c94
 8004a10:	20000c64 	.word	0x20000c64
 8004a14:	20000c60 	.word	0x20000c60
 8004a18:	20000cc8 	.word	0x20000cc8

08004a1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	@ 0x28
 8004a20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a26:	f000 fb13 	bl	8005050 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <xTimerCreateTimerTask+0x84>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d021      	beq.n	8004a76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a3a:	1d3a      	adds	r2, r7, #4
 8004a3c:	f107 0108 	add.w	r1, r7, #8
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd fee3 	bl	8002810 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	9202      	str	r2, [sp, #8]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	2302      	movs	r3, #2
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	4911      	ldr	r1, [pc, #68]	@ (8004aa4 <xTimerCreateTimerTask+0x88>)
 8004a5e:	4812      	ldr	r0, [pc, #72]	@ (8004aa8 <xTimerCreateTimerTask+0x8c>)
 8004a60:	f7fe ffd0 	bl	8003a04 <xTaskCreateStatic>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4a11      	ldr	r2, [pc, #68]	@ (8004aac <xTimerCreateTimerTask+0x90>)
 8004a68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a6a:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <xTimerCreateTimerTask+0x90>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a72:	2301      	movs	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	613b      	str	r3, [r7, #16]
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a94:	697b      	ldr	r3, [r7, #20]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000d04 	.word	0x20000d04
 8004aa4:	08005a34 	.word	0x08005a34
 8004aa8:	08004be9 	.word	0x08004be9
 8004aac:	20000d08 	.word	0x20000d08

08004ab0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	@ 0x28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	623b      	str	r3, [r7, #32]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <xTimerGenericCommand+0x98>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02a      	beq.n	8004b3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	dc18      	bgt.n	8004b2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004afa:	f7ff fdad 	bl	8004658 <xTaskGetSchedulerState>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d109      	bne.n	8004b18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b04:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <xTimerGenericCommand+0x98>)
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	f107 0110 	add.w	r1, r7, #16
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b10:	f7fe f900 	bl	8002d14 <xQueueGenericSend>
 8004b14:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b16:	e012      	b.n	8004b3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <xTimerGenericCommand+0x98>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	f107 0110 	add.w	r1, r7, #16
 8004b20:	2300      	movs	r3, #0
 8004b22:	2200      	movs	r2, #0
 8004b24:	f7fe f8f6 	bl	8002d14 <xQueueGenericSend>
 8004b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b2a:	e008      	b.n	8004b3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <xTimerGenericCommand+0x98>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	f107 0110 	add.w	r1, r7, #16
 8004b34:	2300      	movs	r3, #0
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	f7fe f9ee 	bl	8002f18 <xQueueGenericSendFromISR>
 8004b3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3728      	adds	r7, #40	@ 0x28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000d04 	.word	0x20000d04

08004b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b56:	4b23      	ldr	r3, [pc, #140]	@ (8004be4 <prvProcessExpiredTimer+0x98>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fd fef7 	bl	8002958 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d023      	beq.n	8004bc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	18d1      	adds	r1, r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	6978      	ldr	r0, [r7, #20]
 8004b86:	f000 f8d5 	bl	8004d34 <prvInsertTimerInActiveList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b90:	2300      	movs	r3, #0
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff88 	bl	8004ab0 <xTimerGenericCommand>
 8004ba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	4798      	blx	r3
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000cfc 	.word	0x20000cfc

08004be8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f859 	bl	8004cac <prvGetNextExpireTime>
 8004bfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f805 	bl	8004c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c06:	f000 f8d7 	bl	8004db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c0a:	bf00      	nop
 8004c0c:	e7f0      	b.n	8004bf0 <prvTimerTask+0x8>
	...

08004c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c1a:	f7ff f937 	bl	8003e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f866 	bl	8004cf4 <prvSampleTimeNow>
 8004c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d130      	bne.n	8004c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <prvProcessTimerOrBlockTask+0x3c>
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d806      	bhi.n	8004c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c3e:	f7ff f933 	bl	8003ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff81 	bl	8004b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c4a:	e024      	b.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c52:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <prvProcessTimerOrBlockTask+0x90>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <prvProcessTimerOrBlockTask+0x50>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <prvProcessTimerOrBlockTask+0x52>
 8004c60:	2300      	movs	r3, #0
 8004c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <prvProcessTimerOrBlockTask+0x94>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f7fe fe93 	bl	800399c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c76:	f7ff f917 	bl	8003ea8 <xTaskResumeAll>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c80:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <prvProcessTimerOrBlockTask+0x98>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
}
 8004c90:	e001      	b.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c92:	f7ff f909 	bl	8003ea8 <xTaskResumeAll>
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000d00 	.word	0x20000d00
 8004ca4:	20000d04 	.word	0x20000d04
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <prvGetNextExpireTime+0x44>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <prvGetNextExpireTime+0x16>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	e000      	b.n	8004cc4 <prvGetNextExpireTime+0x18>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cd0:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <prvGetNextExpireTime+0x44>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e001      	b.n	8004ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000cfc 	.word	0x20000cfc

08004cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cfc:	f7ff f972 	bl	8003fe4 <xTaskGetTickCount>
 8004d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <prvSampleTimeNow+0x3c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d205      	bcs.n	8004d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d0c:	f000 f93a 	bl	8004f84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e002      	b.n	8004d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d1e:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <prvSampleTimeNow+0x3c>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d24:	68fb      	ldr	r3, [r7, #12]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000d0c 	.word	0x20000d0c

08004d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d812      	bhi.n	8004d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e01b      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <prvInsertTimerInActiveList+0x7c>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7fd fdb4 	bl	80028e6 <vListInsert>
 8004d7e:	e012      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d206      	bcs.n	8004d96 <prvInsertTimerInActiveList+0x62>
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e007      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d96:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <prvInsertTimerInActiveList+0x80>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fd fda0 	bl	80028e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000d00 	.word	0x20000d00
 8004db4:	20000cfc 	.word	0x20000cfc

08004db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	@ 0x38
 8004dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dbe:	e0ce      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da19      	bge.n	8004dfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	3304      	adds	r3, #4
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	61fb      	str	r3, [r7, #28]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df0:	6850      	ldr	r0, [r2, #4]
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	6892      	ldr	r2, [r2, #8]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f2c0 80ae 	blt.w	8004f5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd fda0 	bl	8002958 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e18:	463b      	mov	r3, r7
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff6a 	bl	8004cf4 <prvSampleTimeNow>
 8004e20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	f200 8097 	bhi.w	8004f58 <prvProcessReceivedCommands+0x1a0>
 8004e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <prvProcessReceivedCommands+0x78>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e59 	.word	0x08004e59
 8004e3c:	08004ecf 	.word	0x08004ecf
 8004e40:	08004ee3 	.word	0x08004ee3
 8004e44:	08004f2f 	.word	0x08004f2f
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e59 	.word	0x08004e59
 8004e50:	08004ecf 	.word	0x08004ecf
 8004e54:	08004ee3 	.word	0x08004ee3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	18d1      	adds	r1, r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e78:	f7ff ff5c 	bl	8004d34 <prvInsertTimerInActiveList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06c      	beq.n	8004f5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d061      	beq.n	8004f5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	441a      	add	r2, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eaa:	f7ff fe01 	bl	8004ab0 <xTimerGenericCommand>
 8004eae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d152      	bne.n	8004f5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	61bb      	str	r3, [r7, #24]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ee0:	e03d      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	617b      	str	r3, [r7, #20]
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	18d1      	adds	r1, r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f28:	f7ff ff04 	bl	8004d34 <prvInsertTimerInActiveList>
					break;
 8004f2c:	e017      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f3e:	f000 fbeb 	bl	8005718 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f42:	e00c      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f56:	e002      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <prvProcessReceivedCommands+0x1a6>
					break;
 8004f5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <prvProcessReceivedCommands+0x1c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	1d39      	adds	r1, r7, #4
 8004f64:	2200      	movs	r2, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe f904 	bl	8003174 <xQueueReceive>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f47f af26 	bne.w	8004dc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3730      	adds	r7, #48	@ 0x30
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000d04 	.word	0x20000d04

08004f84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f8a:	e049      	b.n	8005020 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f96:	4b2c      	ldr	r3, [pc, #176]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fd fcd7 	bl	8002958 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02f      	beq.n	8005020 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d90e      	bls.n	8004ff0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fde:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fd fc7c 	bl	80028e6 <vListInsert>
 8004fee:	e017      	b.n	8005020 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fd58 	bl	8004ab0 <xTimerGenericCommand>
 8005000:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	603b      	str	r3, [r7, #0]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005020:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1b0      	bne.n	8004f8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <prvSwitchTimerLists+0xc8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a04      	ldr	r2, [pc, #16]	@ (8005048 <prvSwitchTimerLists+0xc4>)
 8005036:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005038:	4a04      	ldr	r2, [pc, #16]	@ (800504c <prvSwitchTimerLists+0xc8>)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6013      	str	r3, [r2, #0]
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000cfc 	.word	0x20000cfc
 800504c:	20000d00 	.word	0x20000d00

08005050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005056:	f000 f96f 	bl	8005338 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800505a:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <prvCheckForValidListAndQueue+0x60>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d120      	bne.n	80050a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005062:	4814      	ldr	r0, [pc, #80]	@ (80050b4 <prvCheckForValidListAndQueue+0x64>)
 8005064:	f7fd fbee 	bl	8002844 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005068:	4813      	ldr	r0, [pc, #76]	@ (80050b8 <prvCheckForValidListAndQueue+0x68>)
 800506a:	f7fd fbeb 	bl	8002844 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800506e:	4b13      	ldr	r3, [pc, #76]	@ (80050bc <prvCheckForValidListAndQueue+0x6c>)
 8005070:	4a10      	ldr	r2, [pc, #64]	@ (80050b4 <prvCheckForValidListAndQueue+0x64>)
 8005072:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005074:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <prvCheckForValidListAndQueue+0x70>)
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <prvCheckForValidListAndQueue+0x68>)
 8005078:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800507a:	2300      	movs	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <prvCheckForValidListAndQueue+0x74>)
 8005080:	4a11      	ldr	r2, [pc, #68]	@ (80050c8 <prvCheckForValidListAndQueue+0x78>)
 8005082:	2110      	movs	r1, #16
 8005084:	200a      	movs	r0, #10
 8005086:	f7fd fcfb 	bl	8002a80 <xQueueGenericCreateStatic>
 800508a:	4603      	mov	r3, r0
 800508c:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <prvCheckForValidListAndQueue+0x60>)
 800508e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005090:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <prvCheckForValidListAndQueue+0x60>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <prvCheckForValidListAndQueue+0x60>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	490b      	ldr	r1, [pc, #44]	@ (80050cc <prvCheckForValidListAndQueue+0x7c>)
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fc28 	bl	80038f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050a4:	f000 f97a 	bl	800539c <vPortExitCritical>
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000d04 	.word	0x20000d04
 80050b4:	20000cd4 	.word	0x20000cd4
 80050b8:	20000ce8 	.word	0x20000ce8
 80050bc:	20000cfc 	.word	0x20000cfc
 80050c0:	20000d00 	.word	0x20000d00
 80050c4:	20000db0 	.word	0x20000db0
 80050c8:	20000d10 	.word	0x20000d10
 80050cc:	08005a3c 	.word	0x08005a3c

080050d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b04      	subs	r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3b04      	subs	r3, #4
 80050fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005100:	4a0c      	ldr	r2, [pc, #48]	@ (8005134 <pxPortInitialiseStack+0x64>)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b14      	subs	r3, #20
 800510a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b04      	subs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f06f 0202 	mvn.w	r2, #2
 800511e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b20      	subs	r3, #32
 8005124:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	08005139 	.word	0x08005139

08005138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005142:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <prvTaskExitError+0x58>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d00b      	beq.n	8005164 <prvTaskExitError+0x2c>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	60fb      	str	r3, [r7, #12]
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	e7fd      	b.n	8005160 <prvTaskExitError+0x28>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60bb      	str	r3, [r7, #8]
}
 8005176:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005178:	bf00      	nop
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0fc      	beq.n	800517a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000010 	.word	0x20000010
	...

080051a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <pxCurrentTCBConst2>)
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	6808      	ldr	r0, [r1, #0]
 80051a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	f380 8809 	msr	PSP, r0
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f380 8811 	msr	BASEPRI, r0
 80051ba:	4770      	bx	lr
 80051bc:	f3af 8000 	nop.w

080051c0 <pxCurrentTCBConst2>:
 80051c0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop

080051c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051c8:	4808      	ldr	r0, [pc, #32]	@ (80051ec <prvPortStartFirstTask+0x24>)
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	6800      	ldr	r0, [r0, #0]
 80051ce:	f380 8808 	msr	MSP, r0
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8814 	msr	CONTROL, r0
 80051da:	b662      	cpsie	i
 80051dc:	b661      	cpsie	f
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	df00      	svc	0
 80051e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ea:	bf00      	nop
 80051ec:	e000ed08 	.word	0xe000ed08

080051f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051f6:	4b47      	ldr	r3, [pc, #284]	@ (8005314 <xPortStartScheduler+0x124>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a47      	ldr	r2, [pc, #284]	@ (8005318 <xPortStartScheduler+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10b      	bne.n	8005218 <xPortStartScheduler+0x28>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005218:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <xPortStartScheduler+0x124>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3f      	ldr	r2, [pc, #252]	@ (800531c <xPortStartScheduler+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10b      	bne.n	800523a <xPortStartScheduler+0x4a>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <xPortStartScheduler+0x130>)
 800523c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	22ff      	movs	r2, #255	@ 0xff
 800524a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4b31      	ldr	r3, [pc, #196]	@ (8005324 <xPortStartScheduler+0x134>)
 8005260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005262:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <xPortStartScheduler+0x138>)
 8005264:	2207      	movs	r2, #7
 8005266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005268:	e009      	b.n	800527e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800526a:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <xPortStartScheduler+0x138>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3b01      	subs	r3, #1
 8005270:	4a2d      	ldr	r2, [pc, #180]	@ (8005328 <xPortStartScheduler+0x138>)
 8005272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d0ef      	beq.n	800526a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800528a:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <xPortStartScheduler+0x138>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1c3 0307 	rsb	r3, r3, #7
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00b      	beq.n	80052ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60bb      	str	r3, [r7, #8]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <xPortStartScheduler+0x138>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <xPortStartScheduler+0x138>)
 80052b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <xPortStartScheduler+0x138>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052c0:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <xPortStartScheduler+0x138>)
 80052c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052cc:	4b17      	ldr	r3, [pc, #92]	@ (800532c <xPortStartScheduler+0x13c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	@ (800532c <xPortStartScheduler+0x13c>)
 80052d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052d8:	4b14      	ldr	r3, [pc, #80]	@ (800532c <xPortStartScheduler+0x13c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a13      	ldr	r2, [pc, #76]	@ (800532c <xPortStartScheduler+0x13c>)
 80052de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e4:	f000 f8da 	bl	800549c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052e8:	4b11      	ldr	r3, [pc, #68]	@ (8005330 <xPortStartScheduler+0x140>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ee:	f000 f8f9 	bl	80054e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <xPortStartScheduler+0x144>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <xPortStartScheduler+0x144>)
 80052f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052fe:	f7ff ff63 	bl	80051c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005302:	f7fe ff39 	bl	8004178 <vTaskSwitchContext>
	prvTaskExitError();
 8005306:	f7ff ff17 	bl	8005138 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed00 	.word	0xe000ed00
 8005318:	410fc271 	.word	0x410fc271
 800531c:	410fc270 	.word	0x410fc270
 8005320:	e000e400 	.word	0xe000e400
 8005324:	20000e00 	.word	0x20000e00
 8005328:	20000e04 	.word	0x20000e04
 800532c:	e000ed20 	.word	0xe000ed20
 8005330:	20000010 	.word	0x20000010
 8005334:	e000ef34 	.word	0xe000ef34

08005338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005352:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <vPortEnterCritical+0x5c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a0e      	ldr	r2, [pc, #56]	@ (8005394 <vPortEnterCritical+0x5c>)
 800535a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <vPortEnterCritical+0x5c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d110      	bne.n	8005386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <vPortEnterCritical+0x60>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <vPortEnterCritical+0x4e>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	603b      	str	r3, [r7, #0]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vPortEnterCritical+0x4a>
	}
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <vPortExitCritical+0x50>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vPortExitCritical+0x26>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortExitCritical+0x50>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <vPortExitCritical+0x50>)
 80053ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <vPortExitCritical+0x50>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <vPortExitCritical+0x44>
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
}
 80053de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000010 	.word	0x20000010

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005414:	f380 8811 	msr	BASEPRI, r0
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f7fe feaa 	bl	8004178 <vTaskSwitchContext>
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f380 8811 	msr	BASEPRI, r0
 800542c:	bc09      	pop	{r0, r3}
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005436:	f01e 0f10 	tst.w	lr, #16
 800543a:	bf08      	it	eq
 800543c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005440:	f380 8809 	msr	PSP, r0
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst>:
 8005450:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005472:	f7fe fdc7 	bl	8004004 <xTaskIncrementTick>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <xPortSysTickHandler+0x40>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f383 8811 	msr	BASEPRI, r3
}
 800548e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <vPortSetupTimerInterrupt+0x34>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <vPortSetupTimerInterrupt+0x38>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vPortSetupTimerInterrupt+0x3c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <vPortSetupTimerInterrupt+0x40>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	4a09      	ldr	r2, [pc, #36]	@ (80054e0 <vPortSetupTimerInterrupt+0x44>)
 80054ba:	3b01      	subs	r3, #1
 80054bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054be:	4b04      	ldr	r3, [pc, #16]	@ (80054d0 <vPortSetupTimerInterrupt+0x34>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e010 	.word	0xe000e010
 80054d4:	e000e018 	.word	0xe000e018
 80054d8:	20000004 	.word	0x20000004
 80054dc:	10624dd3 	.word	0x10624dd3
 80054e0:	e000e014 	.word	0xe000e014

080054e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054f4 <vPortEnableVFP+0x10>
 80054e8:	6801      	ldr	r1, [r0, #0]
 80054ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ee:	6001      	str	r1, [r0, #0]
 80054f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054f2:	bf00      	nop
 80054f4:	e000ed88 	.word	0xe000ed88

080054f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054fe:	f3ef 8305 	mrs	r3, IPSR
 8005502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d915      	bls.n	8005536 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <vPortValidateInterruptPriority+0x74>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005514:	4b16      	ldr	r3, [pc, #88]	@ (8005570 <vPortValidateInterruptPriority+0x78>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	7afa      	ldrb	r2, [r7, #11]
 800551a:	429a      	cmp	r2, r3
 800551c:	d20b      	bcs.n	8005536 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005536:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <vPortValidateInterruptPriority+0x7c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800553e:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <vPortValidateInterruptPriority+0x80>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d90b      	bls.n	800555e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	603b      	str	r3, [r7, #0]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <vPortValidateInterruptPriority+0x62>
	}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000e3f0 	.word	0xe000e3f0
 8005570:	20000e00 	.word	0x20000e00
 8005574:	e000ed0c 	.word	0xe000ed0c
 8005578:	20000e04 	.word	0x20000e04

0800557c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005588:	f7fe fc80 	bl	8003e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800558c:	4b5c      	ldr	r3, [pc, #368]	@ (8005700 <pvPortMalloc+0x184>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005594:	f000 f924 	bl	80057e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005598:	4b5a      	ldr	r3, [pc, #360]	@ (8005704 <pvPortMalloc+0x188>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 8095 	bne.w	80056d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01e      	beq.n	80055ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055ac:	2208      	movs	r2, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	3308      	adds	r3, #8
 80055c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <pvPortMalloc+0x6e>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	617b      	str	r3, [r7, #20]
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	e7fd      	b.n	80055e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d06f      	beq.n	80056d0 <pvPortMalloc+0x154>
 80055f0:	4b45      	ldr	r3, [pc, #276]	@ (8005708 <pvPortMalloc+0x18c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d86a      	bhi.n	80056d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055fa:	4b44      	ldr	r3, [pc, #272]	@ (800570c <pvPortMalloc+0x190>)
 80055fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055fe:	4b43      	ldr	r3, [pc, #268]	@ (800570c <pvPortMalloc+0x190>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005604:	e004      	b.n	8005610 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d903      	bls.n	8005622 <pvPortMalloc+0xa6>
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005622:	4b37      	ldr	r3, [pc, #220]	@ (8005700 <pvPortMalloc+0x184>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	429a      	cmp	r2, r3
 800562a:	d051      	beq.n	80056d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2208      	movs	r2, #8
 8005632:	4413      	add	r3, r2
 8005634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1ad2      	subs	r2, r2, r3
 8005646:	2308      	movs	r3, #8
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	429a      	cmp	r2, r3
 800564c:	d920      	bls.n	8005690 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800564e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <pvPortMalloc+0xfc>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	613b      	str	r3, [r7, #16]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f000 f90a 	bl	80058a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005690:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <pvPortMalloc+0x18c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <pvPortMalloc+0x18c>)
 800569c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800569e:	4b1a      	ldr	r3, [pc, #104]	@ (8005708 <pvPortMalloc+0x18c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <pvPortMalloc+0x194>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d203      	bcs.n	80056b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <pvPortMalloc+0x18c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <pvPortMalloc+0x194>)
 80056b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <pvPortMalloc+0x188>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <pvPortMalloc+0x198>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <pvPortMalloc+0x198>)
 80056ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d0:	f7fe fbea 	bl	8003ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <pvPortMalloc+0x17a>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <pvPortMalloc+0x176>
	return pvReturn;
 80056f6:	69fb      	ldr	r3, [r7, #28]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	@ 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20004a10 	.word	0x20004a10
 8005704:	20004a24 	.word	0x20004a24
 8005708:	20004a14 	.word	0x20004a14
 800570c:	20004a08 	.word	0x20004a08
 8005710:	20004a18 	.word	0x20004a18
 8005714:	20004a1c 	.word	0x20004a1c

08005718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d04f      	beq.n	80057ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800572a:	2308      	movs	r3, #8
 800572c:	425b      	negs	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b25      	ldr	r3, [pc, #148]	@ (80057d4 <vPortFree+0xbc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <vPortFree+0x46>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <vPortFree+0x66>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <vPortFree+0xbc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01e      	beq.n	80057ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11a      	bne.n	80057ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <vPortFree+0xbc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	43db      	mvns	r3, r3
 800579e:	401a      	ands	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a4:	f7fe fb72 	bl	8003e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <vPortFree+0xc0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	4a09      	ldr	r2, [pc, #36]	@ (80057d8 <vPortFree+0xc0>)
 80057b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f000 f874 	bl	80058a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vPortFree+0xc4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a06      	ldr	r2, [pc, #24]	@ (80057dc <vPortFree+0xc4>)
 80057c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057c6:	f7fe fb6f 	bl	8003ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20004a24 	.word	0x20004a24
 80057d8:	20004a14 	.word	0x20004a14
 80057dc:	20004a20 	.word	0x20004a20

080057e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057ec:	4b27      	ldr	r3, [pc, #156]	@ (800588c <prvHeapInit+0xac>)
 80057ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3307      	adds	r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <prvHeapInit+0xac>)
 8005810:	4413      	add	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005818:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <prvHeapInit+0xb0>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800581e:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <prvHeapInit+0xb0>)
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800582c:	2208      	movs	r2, #8
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <prvHeapInit+0xb4>)
 8005840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005842:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <prvHeapInit+0xb4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800584a:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <prvHeapInit+0xb4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005860:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <prvHeapInit+0xb4>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a0a      	ldr	r2, [pc, #40]	@ (8005898 <prvHeapInit+0xb8>)
 800586e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a09      	ldr	r2, [pc, #36]	@ (800589c <prvHeapInit+0xbc>)
 8005876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <prvHeapInit+0xc0>)
 800587a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800587e:	601a      	str	r2, [r3, #0]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000e08 	.word	0x20000e08
 8005890:	20004a08 	.word	0x20004a08
 8005894:	20004a10 	.word	0x20004a10
 8005898:	20004a18 	.word	0x20004a18
 800589c:	20004a14 	.word	0x20004a14
 80058a0:	20004a24 	.word	0x20004a24

080058a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058ac:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <prvInsertBlockIntoFreeList+0xac>)
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e002      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x14>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d8f7      	bhi.n	80058b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d108      	bne.n	80058e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	441a      	add	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d118      	bne.n	800592c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <prvInsertBlockIntoFreeList+0xb0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d00d      	beq.n	8005922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e008      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005922:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <prvInsertBlockIntoFreeList+0xb0>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e003      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d002      	beq.n	8005942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20004a08 	.word	0x20004a08
 8005954:	20004a10 	.word	0x20004a10

08005958 <memset>:
 8005958:	4402      	add	r2, r0
 800595a:	4603      	mov	r3, r0
 800595c:	4293      	cmp	r3, r2
 800595e:	d100      	bne.n	8005962 <memset+0xa>
 8005960:	4770      	bx	lr
 8005962:	f803 1b01 	strb.w	r1, [r3], #1
 8005966:	e7f9      	b.n	800595c <memset+0x4>

08005968 <__libc_init_array>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4d0d      	ldr	r5, [pc, #52]	@ (80059a0 <__libc_init_array+0x38>)
 800596c:	4c0d      	ldr	r4, [pc, #52]	@ (80059a4 <__libc_init_array+0x3c>)
 800596e:	1b64      	subs	r4, r4, r5
 8005970:	10a4      	asrs	r4, r4, #2
 8005972:	2600      	movs	r6, #0
 8005974:	42a6      	cmp	r6, r4
 8005976:	d109      	bne.n	800598c <__libc_init_array+0x24>
 8005978:	4d0b      	ldr	r5, [pc, #44]	@ (80059a8 <__libc_init_array+0x40>)
 800597a:	4c0c      	ldr	r4, [pc, #48]	@ (80059ac <__libc_init_array+0x44>)
 800597c:	f000 f826 	bl	80059cc <_init>
 8005980:	1b64      	subs	r4, r4, r5
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	2600      	movs	r6, #0
 8005986:	42a6      	cmp	r6, r4
 8005988:	d105      	bne.n	8005996 <__libc_init_array+0x2e>
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005990:	4798      	blx	r3
 8005992:	3601      	adds	r6, #1
 8005994:	e7ee      	b.n	8005974 <__libc_init_array+0xc>
 8005996:	f855 3b04 	ldr.w	r3, [r5], #4
 800599a:	4798      	blx	r3
 800599c:	3601      	adds	r6, #1
 800599e:	e7f2      	b.n	8005986 <__libc_init_array+0x1e>
 80059a0:	08005ae0 	.word	0x08005ae0
 80059a4:	08005ae0 	.word	0x08005ae0
 80059a8:	08005ae0 	.word	0x08005ae0
 80059ac:	08005ae4 	.word	0x08005ae4

080059b0 <memcpy>:
 80059b0:	440a      	add	r2, r1
 80059b2:	4291      	cmp	r1, r2
 80059b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b8:	d100      	bne.n	80059bc <memcpy+0xc>
 80059ba:	4770      	bx	lr
 80059bc:	b510      	push	{r4, lr}
 80059be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c6:	4291      	cmp	r1, r2
 80059c8:	d1f9      	bne.n	80059be <memcpy+0xe>
 80059ca:	bd10      	pop	{r4, pc}

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
